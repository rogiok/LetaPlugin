/*
* generated by Xtext
*/
grammar InternalLeta;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.services.LetaGrammarAccess;

}

@parser::members {

 	private LetaGrammarAccess grammarAccess;
 	
    public InternalLetaParser(TokenStream input, LetaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Leta";	
   	}
   	
   	@Override
   	protected LetaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLeta
entryRuleLeta returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetaRule()); }
	 iv_ruleLeta=ruleLeta 
	 { $current=$iv_ruleLeta.current; } 
	 EOF 
;

// Rule Leta
ruleLeta returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLetaAccess().getTpTestPackageParserRuleCall_0_0()); 
	    }
		lv_tp_0_0=ruleTestPackage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetaRule());
	        }
       		set(
       			$current, 
       			"tp",
        		lv_tp_0_0, 
        		"TestPackage");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLetaAccess().getTcTestCaseParserRuleCall_1_0()); 
	    }
		lv_tc_1_0=ruleTestCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetaRule());
	        }
       		add(
       			$current, 
       			"tc",
        		lv_tc_1_0, 
        		"TestCase");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleTestCase
entryRuleTestCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestCaseRule()); }
	 iv_ruleTestCase=ruleTestCase 
	 { $current=$iv_ruleTestCase.current; } 
	 EOF 
;

// Rule TestCase
ruleTestCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Test' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTestCaseAccess().getTestKeyword_0());
    }
(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getTestCaseAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestCaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTestCaseAccess().getVVerifyClauseParserRuleCall_2_0()); 
	    }
		lv_v_2_0=ruleVerifyClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestCaseRule());
	        }
       		set(
       			$current, 
       			"v",
        		lv_v_2_0, 
        		"VerifyClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTestCaseAccess().getWWhenClauseParserRuleCall_3_0()); 
	    }
		lv_w_3_0=ruleWhenClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestCaseRule());
	        }
       		set(
       			$current, 
       			"w",
        		lv_w_3_0, 
        		"WhenClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTestCaseAccess().getSSetClauseParserRuleCall_4_0()); 
	    }
		lv_s_4_0=ruleSetClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestCaseRule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_4_0, 
        		"SetClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleVerifyClause
entryRuleVerifyClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVerifyClauseRule()); }
	 iv_ruleVerifyClause=ruleVerifyClause 
	 { $current=$iv_ruleVerifyClause.current; } 
	 EOF 
;

// Rule VerifyClause
ruleVerifyClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Verify' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVerifyClauseAccess().getVerifyKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVerifyClauseAccess().getFcFactCompositeParserRuleCall_1_0()); 
	    }
		lv_fc_1_0=rulefactComposite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVerifyClauseRule());
	        }
       		set(
       			$current, 
       			"fc",
        		lv_fc_1_0, 
        		"factComposite");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhenClause
entryRuleWhenClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhenClauseRule()); }
	 iv_ruleWhenClause=ruleWhenClause 
	 { $current=$iv_ruleWhenClause.current; } 
	 EOF 
;

// Rule WhenClause
ruleWhenClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='When' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhenClauseAccess().getWhenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhenClauseAccess().getFcFactCompositeParserRuleCall_1_0()); 
	    }
		lv_fc_1_0=rulefactComposite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhenClauseRule());
	        }
       		set(
       			$current, 
       			"fc",
        		lv_fc_1_0, 
        		"factComposite");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSetClause
entryRuleSetClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetClauseRule()); }
	 iv_ruleSetClause=ruleSetClause 
	 { $current=$iv_ruleSetClause.current; } 
	 EOF 
;

// Rule SetClause
ruleSetClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSetClauseAccess().getSetAction_0(),
            $current);
    }
)	otherlv_1='Set' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSetClauseAccess().getSetKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetClauseAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetClauseAccess().getSSetParserRuleCall_3_0()); 
	    }
		lv_s_3_0=ruleSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetClauseRule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_3_0, 
        		"Set");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSetClauseAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulefactComposite
entryRulefactComposite returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactCompositeRule()); }
	 iv_rulefactComposite=rulefactComposite 
	 { $current=$iv_rulefactComposite.current; } 
	 EOF 
;

// Rule factComposite
rulefactComposite returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		{ 
	        newCompositeNode(grammarAccess.getFactCompositeAccess().getFFactParserRuleCall_0_0_0_0()); 
	    }
		lv_f_0_0=ruleFact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactCompositeRule());
	        }
       		set(
       			$current, 
       			"f",
        		lv_f_0_0, 
        		"Fact");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFactCompositeAccess().getFoFormulaParserRuleCall_0_0_1_0()); 
	    }
		lv_fo_1_0=ruleFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactCompositeRule());
	        }
       		set(
       			$current, 
       			"fo",
        		lv_fo_1_0, 
        		"Formula");
	        afterParserOrEnumRuleCall();
	    }

)
))((
(
		{ 
	        newCompositeNode(grammarAccess.getFactCompositeAccess().getOpLogicalOperatorParserRuleCall_0_1_0_0()); 
	    }
		lv_op_2_0=rulelogicalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactCompositeRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"logicalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactCompositeAccess().getFcFactCompositeParserRuleCall_0_1_1_0()); 
	    }
		lv_fc_3_0=rulefactComposite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactCompositeRule());
	        }
       		set(
       			$current, 
       			"fc",
        		lv_fc_3_0, 
        		"factComposite");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFactCompositeAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFactCompositeAccess().getFc1FactCompositeParserRuleCall_1_1_0()); 
	    }
		lv_fc1_5_0=rulefactComposite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactCompositeRule());
	        }
       		set(
       			$current, 
       			"fc1",
        		lv_fc1_5_0, 
        		"factComposite");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFactCompositeAccess().getRightParenthesisKeyword_1_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFactCompositeAccess().getOpLogicalOperatorParserRuleCall_1_3_0_0()); 
	    }
		lv_op_7_0=rulelogicalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactCompositeRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_7_0, 
        		"logicalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactCompositeAccess().getFc2FactCompositeParserRuleCall_1_3_1_0()); 
	    }
		lv_fc2_8_0=rulefactComposite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactCompositeRule());
	        }
       		set(
       			$current, 
       			"fc2",
        		lv_fc2_8_0, 
        		"factComposite");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRulelogicalOperator
entryRulelogicalOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOperatorRule()); } 
	 iv_rulelogicalOperator=rulelogicalOperator 
	 { $current=$iv_rulelogicalOperator.current.getText(); }  
	 EOF 
;

// Rule logicalOperator
rulelogicalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='And' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getAndKeyword_0()); 
    }

    |
	kw='Or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getOrKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleFact
entryRuleFact returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactRule()); }
	 iv_ruleFact=ruleFact 
	 { $current=$iv_ruleFact.current; } 
	 EOF 
;

// Rule Fact
ruleFact returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFactAccess().getTermCompositeTermCompositeParserRuleCall_0_0()); 
	    }
		lv_termComposite_0_0=ruleTermComposite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactRule());
	        }
       		set(
       			$current, 
       			"termComposite",
        		lv_termComposite_0_0, 
        		"TermComposite");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactAccess().getComplementComplementParserRuleCall_1_0()); 
	    }
		lv_complement_1_0=ruleComplement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactRule());
	        }
       		set(
       			$current, 
       			"complement",
        		lv_complement_1_0, 
        		"Complement");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFactAccess().getTermComposite2TermCompositeParserRuleCall_2_0_0()); 
	    }
		lv_termComposite2_2_0=ruleTermComposite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactRule());
	        }
       		set(
       			$current, 
       			"termComposite2",
        		lv_termComposite2_2_0, 
        		"TermComposite");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactAccess().getFactExtFactExtParserRuleCall_2_1_0()); 
	    }
		lv_factExt_3_0=ruleFactExt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactRule());
	        }
       		set(
       			$current, 
       			"factExt",
        		lv_factExt_3_0, 
        		"FactExt");
	        afterParserOrEnumRuleCall();
	    }

)
)?)?)
;





// Entry rule entryRuleFactExt
entryRuleFactExt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactExtRule()); }
	 iv_ruleFactExt=ruleFactExt 
	 { $current=$iv_ruleFactExt.current; } 
	 EOF 
;

// Rule FactExt
ruleFactExt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFactExtAccess().getComplementComplementParserRuleCall_0_0()); 
	    }
		lv_complement_0_0=ruleComplement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactExtRule());
	        }
       		set(
       			$current, 
       			"complement",
        		lv_complement_0_0, 
        		"Complement");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFactExtAccess().getTermCompositeTermCompositeParserRuleCall_1_0_0()); 
	    }
		lv_termComposite_1_0=ruleTermComposite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactExtRule());
	        }
       		set(
       			$current, 
       			"termComposite",
        		lv_termComposite_1_0, 
        		"TermComposite");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactExtAccess().getFactExtFactExtParserRuleCall_1_1_0()); 
	    }
		lv_factExt_2_0=ruleFactExt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactExtRule());
	        }
       		set(
       			$current, 
       			"factExt",
        		lv_factExt_2_0, 
        		"FactExt");
	        afterParserOrEnumRuleCall();
	    }

)
)?)?)
;





// Entry rule entryRuleTermComposite
entryRuleTermComposite returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermCompositeRule()); }
	 iv_ruleTermComposite=ruleTermComposite 
	 { $current=$iv_ruleTermComposite.current; } 
	 EOF 
;

// Rule TermComposite
ruleTermComposite returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTermCompositeAccess().getQuantifierQuantifierParserRuleCall_0_0()); 
	    }
		lv_quantifier_0_0=ruleQuantifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermCompositeRule());
	        }
       		set(
       			$current, 
       			"quantifier",
        		lv_quantifier_0_0, 
        		"Quantifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getTermCompositeAccess().getTermTermParserRuleCall_1_0_0()); 
	    }
		lv_term_1_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermCompositeRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_1_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTermCompositeAccess().getTermInstanceTermInstanceParserRuleCall_1_1_0()); 
	    }
		lv_termInstance_2_0=ruleTermInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermCompositeRule());
	        }
       		set(
       			$current, 
       			"termInstance",
        		lv_termInstance_2_0, 
        		"TermInstance");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTermCompositeAccess().getTermWithAssociationTermWithAssociationParserRuleCall_1_2_0()); 
	    }
		lv_termWithAssociation_3_0=ruleTermWithAssociation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermCompositeRule());
	        }
       		set(
       			$current, 
       			"termWithAssociation",
        		lv_termWithAssociation_3_0, 
        		"TermWithAssociation");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getTermAccess().getIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleTermInstance
entryRuleTermInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermInstanceRule()); }
	 iv_ruleTermInstance=ruleTermInstance 
	 { $current=$iv_ruleTermInstance.current; } 
	 EOF 
;

// Rule TermInstance
ruleTermInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getTermInstanceAccess().getTermTermParserRuleCall_0_0_0()); 
	    }
		lv_term_0_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermInstanceRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_0_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTermInstanceAccess().getNotEqualOperatorNotEqualOperatorParserRuleCall_0_1_0()); 
	    }
		lv_notEqualOperator_1_0=ruleNotEqualOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermInstanceRule());
	        }
       		set(
       			$current, 
       			"notEqualOperator",
        		lv_notEqualOperator_1_0, 
        		"NotEqualOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTermInstanceAccess().getStringLiteralStringLiteralParserRuleCall_0_2_0()); 
	    }
		lv_stringLiteral_2_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermInstanceRule());
	        }
       		set(
       			$current, 
       			"stringLiteral",
        		lv_stringLiteral_2_0, 
        		"StringLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTermInstanceAccess().getTermTermParserRuleCall_1_0_0()); 
	    }
		lv_term_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermInstanceRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_3_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTermInstanceAccess().getRelationalOperatorRelationalOperatorParserRuleCall_1_1_0()); 
	    }
		lv_relationalOperator_4_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermInstanceRule());
	        }
       		set(
       			$current, 
       			"relationalOperator",
        		lv_relationalOperator_4_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTermInstanceAccess().getOtherLiteralOtherLiteralParserRuleCall_1_2_0()); 
	    }
		lv_otherLiteral_5_0=ruleOtherLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermInstanceRule());
	        }
       		set(
       			$current, 
       			"otherLiteral",
        		lv_otherLiteral_5_0, 
        		"OtherLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleTermWithAssociation
entryRuleTermWithAssociation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermWithAssociationRule()); }
	 iv_ruleTermWithAssociation=ruleTermWithAssociation 
	 { $current=$iv_ruleTermWithAssociation.current; } 
	 EOF 
;

// Rule TermWithAssociation
ruleTermWithAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTermWithAssociationAccess().getTTermParserRuleCall_0_0()); 
	    }
		lv_t_0_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermWithAssociationRule());
	        }
       		set(
       			$current, 
       			"t",
        		lv_t_0_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTermWithAssociationAccess().getRoRelationalOperatorParserRuleCall_1_0()); 
	    }
		lv_ro_1_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermWithAssociationRule());
	        }
       		set(
       			$current, 
       			"ro",
        		lv_ro_1_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='@' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTermWithAssociationAccess().getCommercialAtKeyword_2());
    }
(
(
		lv_index_3_0=RULE_INT
		{
			newLeafNode(lv_index_3_0, grammarAccess.getTermWithAssociationAccess().getIndexINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermWithAssociationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_3_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleQuantifier
entryRuleQuantifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantifierRule()); }
	 iv_ruleQuantifier=ruleQuantifier 
	 { $current=$iv_ruleQuantifier.current; } 
	 EOF 
;

// Rule Quantifier
ruleQuantifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='atLeast' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuantifierAccess().getAtLeastKeyword_0_0());
    }
(
(
		lv_v_1_0=RULE_INT
		{
			newLeafNode(lv_v_1_0, grammarAccess.getQuantifierAccess().getVINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuantifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"v",
        		lv_v_1_0, 
        		"INT");
	    }

)
))
    |(	otherlv_2='atMost' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuantifierAccess().getAtMostKeyword_1_0());
    }
(
(
		lv_v_3_0=RULE_INT
		{
			newLeafNode(lv_v_3_0, grammarAccess.getQuantifierAccess().getVINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuantifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"v",
        		lv_v_3_0, 
        		"INT");
	    }

)
))
    |(	otherlv_4='exactly' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuantifierAccess().getExactlyKeyword_2_0());
    }
(
(
		lv_v_5_0=RULE_INT
		{
			newLeafNode(lv_v_5_0, grammarAccess.getQuantifierAccess().getVINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuantifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"v",
        		lv_v_5_0, 
        		"INT");
	    }

)
))
    |(	otherlv_6='atLeastAndAtMost' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQuantifierAccess().getAtLeastAndAtMostKeyword_3_0());
    }
(
(
		lv_v1_7_0=RULE_INT
		{
			newLeafNode(lv_v1_7_0, grammarAccess.getQuantifierAccess().getV1INTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuantifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"v1",
        		lv_v1_7_0, 
        		"INT");
	    }

)
)(
(
		lv_v2_8_0=RULE_INT
		{
			newLeafNode(lv_v2_8_0, grammarAccess.getQuantifierAccess().getV2INTTerminalRuleCall_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuantifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"v2",
        		lv_v2_8_0, 
        		"INT");
	    }

)
)))
;





// Entry rule entryRuleComplement
entryRuleComplement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplementRule()); }
	 iv_ruleComplement=ruleComplement 
	 { $current=$iv_ruleComplement.current; } 
	 EOF 
;

// Rule Complement
ruleComplement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getComplementAccess().getIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleFormula
entryRuleFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	 iv_ruleFormula=ruleFormula 
	 { $current=$iv_ruleFormula.current; } 
	 EOF 
;

// Rule Formula
ruleFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaAccess().getFiFormulaItemParserRuleCall_0_0()); 
	    }
		lv_fi_0_0=ruleFormulaItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaRule());
	        }
       		set(
       			$current, 
       			"fi",
        		lv_fi_0_0, 
        		"FormulaItem");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFormulaAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaAccess().getFeFormulaExpressionParserRuleCall_2_0()); 
	    }
		lv_fe_2_0=ruleFormulaExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaRule());
	        }
       		set(
       			$current, 
       			"fe",
        		lv_fe_2_0, 
        		"FormulaExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFormulaExpression
entryRuleFormulaExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormulaExpressionRule()); }
	 iv_ruleFormulaExpression=ruleFormulaExpression 
	 { $current=$iv_ruleFormulaExpression.current; } 
	 EOF 
;

// Rule FormulaExpression
ruleFormulaExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaExpressionAccess().getFiFormulaItemParserRuleCall_0_0_0()); 
	    }
		lv_fi_0_0=ruleFormulaItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaExpressionRule());
	        }
       		set(
       			$current, 
       			"fi",
        		lv_fi_0_0, 
        		"FormulaItem");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaExpressionAccess().getMoMathOperatorParserRuleCall_0_1_0_0()); 
	    }
		lv_mo_1_0=ruleMathOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaExpressionRule());
	        }
       		set(
       			$current, 
       			"mo",
        		lv_mo_1_0, 
        		"MathOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaExpressionAccess().getFeFormulaExpressionParserRuleCall_0_1_1_0()); 
	    }
		lv_fe_2_0=ruleFormulaExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaExpressionRule());
	        }
       		set(
       			$current, 
       			"fe",
        		lv_fe_2_0, 
        		"FormulaExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFormulaExpressionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaExpressionAccess().getFe1FormulaExpressionParserRuleCall_1_1_0()); 
	    }
		lv_fe1_4_0=ruleFormulaExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaExpressionRule());
	        }
       		set(
       			$current, 
       			"fe1",
        		lv_fe1_4_0, 
        		"FormulaExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFormulaExpressionAccess().getRightParenthesisKeyword_1_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaExpressionAccess().getMoMathOperatorParserRuleCall_1_3_0_0()); 
	    }
		lv_mo_6_0=ruleMathOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaExpressionRule());
	        }
       		set(
       			$current, 
       			"mo",
        		lv_mo_6_0, 
        		"MathOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaExpressionAccess().getFe2FormulaExpressionParserRuleCall_1_3_1_0()); 
	    }
		lv_fe2_7_0=ruleFormulaExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaExpressionRule());
	        }
       		set(
       			$current, 
       			"fe2",
        		lv_fe2_7_0, 
        		"FormulaExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleFormulaItem
entryRuleFormulaItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormulaItemRule()); }
	 iv_ruleFormulaItem=ruleFormulaItem 
	 { $current=$iv_ruleFormulaItem.current; } 
	 EOF 
;

// Rule FormulaItem
ruleFormulaItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaItemAccess().getTTermParserRuleCall_0_0()); 
	    }
		lv_t_0_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaItemRule());
	        }
       		set(
       			$current, 
       			"t",
        		lv_t_0_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaItemAccess().getTiTermInstanceParserRuleCall_1_0()); 
	    }
		lv_ti_1_0=ruleTermInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaItemRule());
	        }
       		set(
       			$current, 
       			"ti",
        		lv_ti_1_0, 
        		"TermInstance");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaItemAccess().getTwaTermWithAssociationParserRuleCall_2_0()); 
	    }
		lv_twa_2_0=ruleTermWithAssociation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaItemRule());
	        }
       		set(
       			$current, 
       			"twa",
        		lv_twa_2_0, 
        		"TermWithAssociation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMathOperator
entryRuleMathOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMathOperatorRule()); } 
	 iv_ruleMathOperator=ruleMathOperator 
	 { $current=$iv_ruleMathOperator.current.getText(); }  
	 EOF 
;

// Rule MathOperator
ruleMathOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperatorAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperatorAccess().getSolidusKeyword_2()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperatorAccess().getAsteriskKeyword_3()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperatorAccess().getPercentSignKeyword_4()); 
    }

    |
	kw='**' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperatorAccess().getAsteriskAsteriskKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOperatorRule()); }
	 iv_ruleRelationalOperator=ruleRelationalOperator 
	 { $current=$iv_ruleRelationalOperator.current; } 
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_o_0_0=	'>' 
    {
        newLeafNode(lv_o_0_0, grammarAccess.getRelationalOperatorAccess().getOGreaterThanSignKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalOperatorRule());
	        }
       		setWithLastConsumed($current, "o", lv_o_0_0, ">");
	    }

)
)
    |(
(
		lv_o_1_0=	'<' 
    {
        newLeafNode(lv_o_1_0, grammarAccess.getRelationalOperatorAccess().getOLessThanSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalOperatorRule());
	        }
       		setWithLastConsumed($current, "o", lv_o_1_0, "<");
	    }

)
)
    |(
(
		lv_o_2_0=	'>=' 
    {
        newLeafNode(lv_o_2_0, grammarAccess.getRelationalOperatorAccess().getOGreaterThanSignEqualsSignKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalOperatorRule());
	        }
       		setWithLastConsumed($current, "o", lv_o_2_0, ">=");
	    }

)
)
    |(
(
		lv_o_3_0=	'<=' 
    {
        newLeafNode(lv_o_3_0, grammarAccess.getRelationalOperatorAccess().getOLessThanSignEqualsSignKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalOperatorRule());
	        }
       		setWithLastConsumed($current, "o", lv_o_3_0, "<=");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalOperatorAccess().getNeoNotEqualOperatorParserRuleCall_4_0()); 
	    }
		lv_neo_4_0=ruleNotEqualOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalOperatorRule());
	        }
       		set(
       			$current, 
       			"neo",
        		lv_neo_4_0, 
        		"NotEqualOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNotEqualOperator
entryRuleNotEqualOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotEqualOperatorRule()); } 
	 iv_ruleNotEqualOperator=ruleNotEqualOperator 
	 { $current=$iv_ruleNotEqualOperator.current.getText(); }  
	 EOF 
;

// Rule NotEqualOperator
ruleNotEqualOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNotEqualOperatorAccess().getExclamationMarkEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleSet
entryRuleSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetRule()); }
	 iv_ruleSet=ruleSet 
	 { $current=$iv_ruleSet.current; } 
	 EOF 
;

// Rule Set
ruleSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetAccess().getLListParserRuleCall_1_0()); 
	    }
		lv_l_1_0=ruleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetRule());
	        }
       		set(
       			$current, 
       			"l",
        		lv_l_1_0, 
        		"List");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetAccess().getRightCurlyBracketKeyword_2());
    }
(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSetAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetAccess().getSSetParserRuleCall_3_1_0()); 
	    }
		lv_s_4_0=ruleSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetRule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_4_0, 
        		"Set");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleList
entryRuleList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListRule()); }
	 iv_ruleList=ruleList 
	 { $current=$iv_ruleList.current; } 
	 EOF 
;

// Rule List
ruleList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getSlStringLiteralParserRuleCall_0_0_0()); 
	    }
		lv_sl_0_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		set(
       			$current, 
       			"sl",
        		lv_sl_0_0, 
        		"StringLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getOlOtherLiteralParserRuleCall_0_1_0()); 
	    }
		lv_ol_1_0=ruleOtherLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		set(
       			$current, 
       			"ol",
        		lv_ol_1_0, 
        		"OtherLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getLListParserRuleCall_1_1_0()); 
	    }
		lv_l_3_0=ruleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		set(
       			$current, 
       			"l",
        		lv_l_3_0, 
        		"List");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); } 
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current.getText(); }  
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringLiteralAccess().getNullKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleOtherLiteral
entryRuleOtherLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOtherLiteralRule()); } 
	 iv_ruleOtherLiteral=ruleOtherLiteral 
	 { $current=$iv_ruleOtherLiteral.current.getText(); }  
	 EOF 
;

// Rule OtherLiteral
ruleOtherLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_FLOAT_0=RULE_FLOAT    {
		$current.merge(this_FLOAT_0);
    }

    { 
    newLeafNode(this_FLOAT_0, grammarAccess.getOtherLiteralAccess().getFLOATTerminalRuleCall_0()); 
    }

    |    this_MINUS_FLOAT_1=RULE_MINUS_FLOAT    {
		$current.merge(this_MINUS_FLOAT_1);
    }

    { 
    newLeafNode(this_MINUS_FLOAT_1, grammarAccess.getOtherLiteralAccess().getMINUS_FLOATTerminalRuleCall_1()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getOtherLiteralAccess().getINTTerminalRuleCall_2()); 
    }

    |    this_MINUS_INTEGER_3=RULE_MINUS_INTEGER    {
		$current.merge(this_MINUS_INTEGER_3);
    }

    { 
    newLeafNode(this_MINUS_INTEGER_3, grammarAccess.getOtherLiteralAccess().getMINUS_INTEGERTerminalRuleCall_3()); 
    }

    |    this_DATE_TIME_4=RULE_DATE_TIME    {
		$current.merge(this_DATE_TIME_4);
    }

    { 
    newLeafNode(this_DATE_TIME_4, grammarAccess.getOtherLiteralAccess().getDATE_TIMETerminalRuleCall_4()); 
    }
)
    ;





// Entry rule entryRuleTestPackage
entryRuleTestPackage returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestPackageRule()); } 
	 iv_ruleTestPackage=ruleTestPackage 
	 { $current=$iv_ruleTestPackage.current.getText(); }  
	 EOF 
;

// Rule TestPackage
ruleTestPackage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Package' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTestPackageAccess().getPackageKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getTestPackageAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTestPackageAccess().getFullStopKeyword_2_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getTestPackageAccess().getIDTerminalRuleCall_2_1()); 
    }
)*)
    ;





fragment RULE_DIGIT : '0'..'9';

RULE_MINUS_INTEGER : '-' RULE_DIGIT+;

RULE_FLOAT : RULE_DIGIT+ '.' RULE_DIGIT*;

RULE_MINUS_FLOAT : '-' RULE_DIGIT+ '.' RULE_DIGIT*;

RULE_DATE_TIME : '[' RULE_DIGIT+ ('-' RULE_DIGIT+ ('-' RULE_DIGIT+)?)? (' ' RULE_DIGIT+ ':' RULE_DIGIT+ (':' RULE_DIGIT+ ('.' RULE_DIGIT+)?)? ('AM'|'PM')? (('+'|'-') RULE_DIGIT+ ':' RULE_DIGIT+)?)? ']';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


