/*
* generated by Xtext
*/

package org.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LetaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Leta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTpTestPackageParserRuleCall_0_0 = (RuleCall)cTpAssignment_0.eContents().get(0);
		private final Assignment cTcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTcTestCaseParserRuleCall_1_0 = (RuleCall)cTcAssignment_1.eContents().get(0);
		
		//Leta:
		//	tp=TestPackage? tc+=TestCase+;
		public ParserRule getRule() { return rule; }

		//tp=TestPackage? tc+=TestCase+
		public Group getGroup() { return cGroup; }

		//tp=TestPackage?
		public Assignment getTpAssignment_0() { return cTpAssignment_0; }

		//TestPackage
		public RuleCall getTpTestPackageParserRuleCall_0_0() { return cTpTestPackageParserRuleCall_0_0; }

		//tc+=TestCase+
		public Assignment getTcAssignment_1() { return cTcAssignment_1; }

		//TestCase
		public RuleCall getTcTestCaseParserRuleCall_1_0() { return cTcTestCaseParserRuleCall_1_0; }
	}

	public class TestCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cVAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVVerifyClauseParserRuleCall_2_0 = (RuleCall)cVAssignment_2.eContents().get(0);
		private final Assignment cWAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWWhenClauseParserRuleCall_3_0 = (RuleCall)cWAssignment_3.eContents().get(0);
		private final Assignment cSAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSSetClauseParserRuleCall_4_0 = (RuleCall)cSAssignment_4.eContents().get(0);
		
		//TestCase:
		//	"Test" id=ID v=VerifyClause w=WhenClause s=SetClause?;
		public ParserRule getRule() { return rule; }

		//"Test" id=ID v=VerifyClause w=WhenClause s=SetClause?
		public Group getGroup() { return cGroup; }

		//"Test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//v=VerifyClause
		public Assignment getVAssignment_2() { return cVAssignment_2; }

		//VerifyClause
		public RuleCall getVVerifyClauseParserRuleCall_2_0() { return cVVerifyClauseParserRuleCall_2_0; }

		//w=WhenClause
		public Assignment getWAssignment_3() { return cWAssignment_3; }

		//WhenClause
		public RuleCall getWWhenClauseParserRuleCall_3_0() { return cWWhenClauseParserRuleCall_3_0; }

		//s=SetClause?
		public Assignment getSAssignment_4() { return cSAssignment_4; }

		//SetClause
		public RuleCall getSSetClauseParserRuleCall_4_0() { return cSSetClauseParserRuleCall_4_0; }
	}

	public class VerifyClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerifyClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFcFactCompositeParserRuleCall_1_0 = (RuleCall)cFcAssignment_1.eContents().get(0);
		
		//VerifyClause:
		//	"verify" fc=FactComposite;
		public ParserRule getRule() { return rule; }

		//"verify" fc=FactComposite
		public Group getGroup() { return cGroup; }

		//"verify"
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }

		//fc=FactComposite
		public Assignment getFcAssignment_1() { return cFcAssignment_1; }

		//FactComposite
		public RuleCall getFcFactCompositeParserRuleCall_1_0() { return cFcFactCompositeParserRuleCall_1_0; }
	}

	public class WhenClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFcFactCompositeParserRuleCall_1_0 = (RuleCall)cFcAssignment_1.eContents().get(0);
		
		//WhenClause:
		//	"when" fc=FactComposite;
		public ParserRule getRule() { return rule; }

		//"when" fc=FactComposite
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//fc=FactComposite
		public Assignment getFcAssignment_1() { return cFcAssignment_1; }

		//FactComposite
		public RuleCall getFcFactCompositeParserRuleCall_1_0() { return cFcFactCompositeParserRuleCall_1_0; }
	}

	public class SetClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSSetParserRuleCall_3_0 = (RuleCall)cSAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetClause:
		//	{Set} "set" "{" s=Set? "}";
		public ParserRule getRule() { return rule; }

		//{Set} "set" "{" s=Set? "}"
		public Group getGroup() { return cGroup; }

		//{Set}
		public Action getSetAction_0() { return cSetAction_0; }

		//"set"
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//s=Set?
		public Assignment getSAssignment_3() { return cSAssignment_3; }

		//Set
		public RuleCall getSSetParserRuleCall_3_0() { return cSSetParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FactCompositeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FactComposite");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cFAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cFFactParserRuleCall_0_0_0_0 = (RuleCall)cFAssignment_0_0_0.eContents().get(0);
		private final Assignment cFoAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cFoFormulaParserRuleCall_0_0_1_0 = (RuleCall)cFoAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOpAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cOpLogicalOperatorParserRuleCall_0_1_0_0 = (RuleCall)cOpAssignment_0_1_0.eContents().get(0);
		private final Assignment cFcAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cFcFactCompositeParserRuleCall_0_1_1_0 = (RuleCall)cFcAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFc1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFc1FactCompositeParserRuleCall_1_1_0 = (RuleCall)cFc1Assignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cOpAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cOpLogicalOperatorParserRuleCall_1_3_0_0 = (RuleCall)cOpAssignment_1_3_0.eContents().get(0);
		private final Assignment cFc2Assignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cFc2FactCompositeParserRuleCall_1_3_1_0 = (RuleCall)cFc2Assignment_1_3_1.eContents().get(0);
		
		//FactComposite:
		//	(f=Fact | fo=Formula) (op=LogicalOperator fc=FactComposite)? | "(" fc1=FactComposite ")" (op=LogicalOperator
		//	fc2=FactComposite)?;
		public ParserRule getRule() { return rule; }

		//(f=Fact | fo=Formula) (op=LogicalOperator fc=FactComposite)? | "(" fc1=FactComposite ")" (op=LogicalOperator
		//fc2=FactComposite)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//(f=Fact | fo=Formula) (op=LogicalOperator fc=FactComposite)?
		public Group getGroup_0() { return cGroup_0; }

		//f=Fact | fo=Formula
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//f=Fact
		public Assignment getFAssignment_0_0_0() { return cFAssignment_0_0_0; }

		//Fact
		public RuleCall getFFactParserRuleCall_0_0_0_0() { return cFFactParserRuleCall_0_0_0_0; }

		//fo=Formula
		public Assignment getFoAssignment_0_0_1() { return cFoAssignment_0_0_1; }

		//Formula
		public RuleCall getFoFormulaParserRuleCall_0_0_1_0() { return cFoFormulaParserRuleCall_0_0_1_0; }

		//(op=LogicalOperator fc=FactComposite)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//op=LogicalOperator
		public Assignment getOpAssignment_0_1_0() { return cOpAssignment_0_1_0; }

		//LogicalOperator
		public RuleCall getOpLogicalOperatorParserRuleCall_0_1_0_0() { return cOpLogicalOperatorParserRuleCall_0_1_0_0; }

		//fc=FactComposite
		public Assignment getFcAssignment_0_1_1() { return cFcAssignment_0_1_1; }

		//FactComposite
		public RuleCall getFcFactCompositeParserRuleCall_0_1_1_0() { return cFcFactCompositeParserRuleCall_0_1_1_0; }

		//"(" fc1=FactComposite ")" (op=LogicalOperator fc2=FactComposite)?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//fc1=FactComposite
		public Assignment getFc1Assignment_1_1() { return cFc1Assignment_1_1; }

		//FactComposite
		public RuleCall getFc1FactCompositeParserRuleCall_1_1_0() { return cFc1FactCompositeParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//(op=LogicalOperator fc2=FactComposite)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//op=LogicalOperator
		public Assignment getOpAssignment_1_3_0() { return cOpAssignment_1_3_0; }

		//LogicalOperator
		public RuleCall getOpLogicalOperatorParserRuleCall_1_3_0_0() { return cOpLogicalOperatorParserRuleCall_1_3_0_0; }

		//fc2=FactComposite
		public Assignment getFc2Assignment_1_3_1() { return cFc2Assignment_1_3_1; }

		//FactComposite
		public RuleCall getFc2FactCompositeParserRuleCall_1_3_1_0() { return cFc2FactCompositeParserRuleCall_1_3_1_0; }
	}

	public class LogicalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LogicalOperator:
		//	"and" | "or";
		public ParserRule getRule() { return rule; }

		//"and" | "or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"and"
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}

	public class FactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermCompositeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermCompositeTermCompositeParserRuleCall_0_0 = (RuleCall)cTermCompositeAssignment_0.eContents().get(0);
		private final Assignment cComplementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComplementComplementParserRuleCall_1_0 = (RuleCall)cComplementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTermComposite2Assignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTermComposite2TermCompositeParserRuleCall_2_0_0 = (RuleCall)cTermComposite2Assignment_2_0.eContents().get(0);
		private final Assignment cFactExtAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFactExtFactExtParserRuleCall_2_1_0 = (RuleCall)cFactExtAssignment_2_1.eContents().get(0);
		
		//Fact:
		//	termComposite=TermComposite complement=Complement (termComposite2=TermComposite factExt=FactExt?)?;
		public ParserRule getRule() { return rule; }

		//termComposite=TermComposite complement=Complement (termComposite2=TermComposite factExt=FactExt?)?
		public Group getGroup() { return cGroup; }

		//termComposite=TermComposite
		public Assignment getTermCompositeAssignment_0() { return cTermCompositeAssignment_0; }

		//TermComposite
		public RuleCall getTermCompositeTermCompositeParserRuleCall_0_0() { return cTermCompositeTermCompositeParserRuleCall_0_0; }

		//complement=Complement
		public Assignment getComplementAssignment_1() { return cComplementAssignment_1; }

		//Complement
		public RuleCall getComplementComplementParserRuleCall_1_0() { return cComplementComplementParserRuleCall_1_0; }

		//(termComposite2=TermComposite factExt=FactExt?)?
		public Group getGroup_2() { return cGroup_2; }

		//termComposite2=TermComposite
		public Assignment getTermComposite2Assignment_2_0() { return cTermComposite2Assignment_2_0; }

		//TermComposite
		public RuleCall getTermComposite2TermCompositeParserRuleCall_2_0_0() { return cTermComposite2TermCompositeParserRuleCall_2_0_0; }

		//factExt=FactExt?
		public Assignment getFactExtAssignment_2_1() { return cFactExtAssignment_2_1; }

		//FactExt
		public RuleCall getFactExtFactExtParserRuleCall_2_1_0() { return cFactExtFactExtParserRuleCall_2_1_0; }
	}

	public class FactExtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FactExt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComplementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComplementComplementParserRuleCall_0_0 = (RuleCall)cComplementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTermCompositeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTermCompositeTermCompositeParserRuleCall_1_0_0 = (RuleCall)cTermCompositeAssignment_1_0.eContents().get(0);
		private final Assignment cFactExtAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFactExtFactExtParserRuleCall_1_1_0 = (RuleCall)cFactExtAssignment_1_1.eContents().get(0);
		
		//FactExt:
		//	complement=Complement (termComposite=TermComposite factExt=FactExt?)?;
		public ParserRule getRule() { return rule; }

		//complement=Complement (termComposite=TermComposite factExt=FactExt?)?
		public Group getGroup() { return cGroup; }

		//complement=Complement
		public Assignment getComplementAssignment_0() { return cComplementAssignment_0; }

		//Complement
		public RuleCall getComplementComplementParserRuleCall_0_0() { return cComplementComplementParserRuleCall_0_0; }

		//(termComposite=TermComposite factExt=FactExt?)?
		public Group getGroup_1() { return cGroup_1; }

		//termComposite=TermComposite
		public Assignment getTermCompositeAssignment_1_0() { return cTermCompositeAssignment_1_0; }

		//TermComposite
		public RuleCall getTermCompositeTermCompositeParserRuleCall_1_0_0() { return cTermCompositeTermCompositeParserRuleCall_1_0_0; }

		//factExt=FactExt?
		public Assignment getFactExtAssignment_1_1() { return cFactExtAssignment_1_1; }

		//FactExt
		public RuleCall getFactExtFactExtParserRuleCall_1_1_0() { return cFactExtFactExtParserRuleCall_1_1_0; }
	}

	public class TermCompositeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TermComposite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantifierQuantifierParserRuleCall_0_0 = (RuleCall)cQuantifierAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTermAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTermTermParserRuleCall_1_0_0 = (RuleCall)cTermAssignment_1_0.eContents().get(0);
		private final Assignment cTermInstanceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTermInstanceTermInstanceParserRuleCall_1_1_0 = (RuleCall)cTermInstanceAssignment_1_1.eContents().get(0);
		private final Assignment cTermWithAssociationAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cTermWithAssociationTermWithAssociationParserRuleCall_1_2_0 = (RuleCall)cTermWithAssociationAssignment_1_2.eContents().get(0);
		
		//TermComposite:
		//	quantifier=Quantifier? (term=Term | termInstance=TermInstance | termWithAssociation=TermWithAssociation);
		public ParserRule getRule() { return rule; }

		//quantifier=Quantifier? (term=Term | termInstance=TermInstance | termWithAssociation=TermWithAssociation)
		public Group getGroup() { return cGroup; }

		//quantifier=Quantifier?
		public Assignment getQuantifierAssignment_0() { return cQuantifierAssignment_0; }

		//Quantifier
		public RuleCall getQuantifierQuantifierParserRuleCall_0_0() { return cQuantifierQuantifierParserRuleCall_0_0; }

		//term=Term | termInstance=TermInstance | termWithAssociation=TermWithAssociation
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//term=Term
		public Assignment getTermAssignment_1_0() { return cTermAssignment_1_0; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_0_0() { return cTermTermParserRuleCall_1_0_0; }

		//termInstance=TermInstance
		public Assignment getTermInstanceAssignment_1_1() { return cTermInstanceAssignment_1_1; }

		//TermInstance
		public RuleCall getTermInstanceTermInstanceParserRuleCall_1_1_0() { return cTermInstanceTermInstanceParserRuleCall_1_1_0; }

		//termWithAssociation=TermWithAssociation
		public Assignment getTermWithAssociationAssignment_1_2() { return cTermWithAssociationAssignment_1_2; }

		//TermWithAssociation
		public RuleCall getTermWithAssociationTermWithAssociationParserRuleCall_1_2_0() { return cTermWithAssociationTermWithAssociationParserRuleCall_1_2_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Term:
		//	id=ID;
		public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class TermInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TermInstance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTermAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTermTermParserRuleCall_0_0_0 = (RuleCall)cTermAssignment_0_0.eContents().get(0);
		private final Assignment cNotEqualOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNotEqualOperatorNotEqualOperatorParserRuleCall_0_1_0 = (RuleCall)cNotEqualOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cStringLiteralAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStringLiteralStringLiteralParserRuleCall_0_2_0 = (RuleCall)cStringLiteralAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTermAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTermTermParserRuleCall_1_0_0 = (RuleCall)cTermAssignment_1_0.eContents().get(0);
		private final Assignment cRelationalOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelationalOperatorRelationalOperatorParserRuleCall_1_1_0 = (RuleCall)cRelationalOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOtherLiteralAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOtherLiteralOtherLiteralParserRuleCall_1_2_0 = (RuleCall)cOtherLiteralAssignment_1_2.eContents().get(0);
		
		//TermInstance:
		//	term=Term notEqualOperator=NotEqualOperator? stringLiteral=StringLiteral | term=Term
		//	relationalOperator=RelationalOperator? otherLiteral=OtherLiteral;
		public ParserRule getRule() { return rule; }

		//term=Term notEqualOperator=NotEqualOperator? stringLiteral=StringLiteral | term=Term
		//relationalOperator=RelationalOperator? otherLiteral=OtherLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//term=Term notEqualOperator=NotEqualOperator? stringLiteral=StringLiteral
		public Group getGroup_0() { return cGroup_0; }

		//term=Term
		public Assignment getTermAssignment_0_0() { return cTermAssignment_0_0; }

		//Term
		public RuleCall getTermTermParserRuleCall_0_0_0() { return cTermTermParserRuleCall_0_0_0; }

		//notEqualOperator=NotEqualOperator?
		public Assignment getNotEqualOperatorAssignment_0_1() { return cNotEqualOperatorAssignment_0_1; }

		//NotEqualOperator
		public RuleCall getNotEqualOperatorNotEqualOperatorParserRuleCall_0_1_0() { return cNotEqualOperatorNotEqualOperatorParserRuleCall_0_1_0; }

		//stringLiteral=StringLiteral
		public Assignment getStringLiteralAssignment_0_2() { return cStringLiteralAssignment_0_2; }

		//StringLiteral
		public RuleCall getStringLiteralStringLiteralParserRuleCall_0_2_0() { return cStringLiteralStringLiteralParserRuleCall_0_2_0; }

		//term=Term relationalOperator=RelationalOperator? otherLiteral=OtherLiteral
		public Group getGroup_1() { return cGroup_1; }

		//term=Term
		public Assignment getTermAssignment_1_0() { return cTermAssignment_1_0; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_0_0() { return cTermTermParserRuleCall_1_0_0; }

		//relationalOperator=RelationalOperator?
		public Assignment getRelationalOperatorAssignment_1_1() { return cRelationalOperatorAssignment_1_1; }

		//RelationalOperator
		public RuleCall getRelationalOperatorRelationalOperatorParserRuleCall_1_1_0() { return cRelationalOperatorRelationalOperatorParserRuleCall_1_1_0; }

		//otherLiteral=OtherLiteral
		public Assignment getOtherLiteralAssignment_1_2() { return cOtherLiteralAssignment_1_2; }

		//OtherLiteral
		public RuleCall getOtherLiteralOtherLiteralParserRuleCall_1_2_0() { return cOtherLiteralOtherLiteralParserRuleCall_1_2_0; }
	}

	public class TermWithAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TermWithAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTTermParserRuleCall_0_0 = (RuleCall)cTAssignment_0.eContents().get(0);
		private final Assignment cRoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRoRelationalOperatorParserRuleCall_1_0 = (RuleCall)cRoAssignment_1.eContents().get(0);
		private final Keyword cCommercialAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexINTTerminalRuleCall_3_0 = (RuleCall)cIndexAssignment_3.eContents().get(0);
		
		//TermWithAssociation:
		//	t=Term ro=RelationalOperator? "@" index=INT;
		public ParserRule getRule() { return rule; }

		//t=Term ro=RelationalOperator? "@" index=INT
		public Group getGroup() { return cGroup; }

		//t=Term
		public Assignment getTAssignment_0() { return cTAssignment_0; }

		//Term
		public RuleCall getTTermParserRuleCall_0_0() { return cTTermParserRuleCall_0_0; }

		//ro=RelationalOperator?
		public Assignment getRoAssignment_1() { return cRoAssignment_1; }

		//RelationalOperator
		public RuleCall getRoRelationalOperatorParserRuleCall_1_0() { return cRoRelationalOperatorParserRuleCall_1_0; }

		//"@"
		public Keyword getCommercialAtKeyword_2() { return cCommercialAtKeyword_2; }

		//index=INT
		public Assignment getIndexAssignment_3() { return cIndexAssignment_3; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_3_0() { return cIndexINTTerminalRuleCall_3_0; }
	}

	public class QuantifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAtleastKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVINTTerminalRuleCall_0_1_0 = (RuleCall)cVAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAtmostKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVINTTerminalRuleCall_1_1_0 = (RuleCall)cVAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cExactlyKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVINTTerminalRuleCall_2_1_0 = (RuleCall)cVAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cAtleastandatmostKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cV1Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cV1INTTerminalRuleCall_3_1_0 = (RuleCall)cV1Assignment_3_1.eContents().get(0);
		private final Assignment cV2Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cV2INTTerminalRuleCall_3_2_0 = (RuleCall)cV2Assignment_3_2.eContents().get(0);
		
		//Quantifier:
		//	"atleast" v=INT | "atmost" v=INT | "exactly" v=INT | "atleastandatmost" v1=INT v2=INT;
		public ParserRule getRule() { return rule; }

		//"atleast" v=INT | "atmost" v=INT | "exactly" v=INT | "atleastandatmost" v1=INT v2=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"atleast" v=INT
		public Group getGroup_0() { return cGroup_0; }

		//"atleast"
		public Keyword getAtleastKeyword_0_0() { return cAtleastKeyword_0_0; }

		//v=INT
		public Assignment getVAssignment_0_1() { return cVAssignment_0_1; }

		//INT
		public RuleCall getVINTTerminalRuleCall_0_1_0() { return cVINTTerminalRuleCall_0_1_0; }

		//"atmost" v=INT
		public Group getGroup_1() { return cGroup_1; }

		//"atmost"
		public Keyword getAtmostKeyword_1_0() { return cAtmostKeyword_1_0; }

		//v=INT
		public Assignment getVAssignment_1_1() { return cVAssignment_1_1; }

		//INT
		public RuleCall getVINTTerminalRuleCall_1_1_0() { return cVINTTerminalRuleCall_1_1_0; }

		//"exactly" v=INT
		public Group getGroup_2() { return cGroup_2; }

		//"exactly"
		public Keyword getExactlyKeyword_2_0() { return cExactlyKeyword_2_0; }

		//v=INT
		public Assignment getVAssignment_2_1() { return cVAssignment_2_1; }

		//INT
		public RuleCall getVINTTerminalRuleCall_2_1_0() { return cVINTTerminalRuleCall_2_1_0; }

		//"atleastandatmost" v1=INT v2=INT
		public Group getGroup_3() { return cGroup_3; }

		//"atleastandatmost"
		public Keyword getAtleastandatmostKeyword_3_0() { return cAtleastandatmostKeyword_3_0; }

		//v1=INT
		public Assignment getV1Assignment_3_1() { return cV1Assignment_3_1; }

		//INT
		public RuleCall getV1INTTerminalRuleCall_3_1_0() { return cV1INTTerminalRuleCall_3_1_0; }

		//v2=INT
		public Assignment getV2Assignment_3_2() { return cV2Assignment_3_2; }

		//INT
		public RuleCall getV2INTTerminalRuleCall_3_2_0() { return cV2INTTerminalRuleCall_3_2_0; }
	}

	public class ComplementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Complement");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Complement:
		//	id=ID;
		public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Formula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFiAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFiFormulaItemParserRuleCall_0_0 = (RuleCall)cFiAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeFormulaExpressionParserRuleCall_2_0 = (RuleCall)cFeAssignment_2.eContents().get(0);
		
		//Formula:
		//	fi=FormulaItem "=" fe=FormulaExpression;
		public ParserRule getRule() { return rule; }

		//fi=FormulaItem "=" fe=FormulaExpression
		public Group getGroup() { return cGroup; }

		//fi=FormulaItem
		public Assignment getFiAssignment_0() { return cFiAssignment_0; }

		//FormulaItem
		public RuleCall getFiFormulaItemParserRuleCall_0_0() { return cFiFormulaItemParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//fe=FormulaExpression
		public Assignment getFeAssignment_2() { return cFeAssignment_2; }

		//FormulaExpression
		public RuleCall getFeFormulaExpressionParserRuleCall_2_0() { return cFeFormulaExpressionParserRuleCall_2_0; }
	}

	public class FormulaExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormulaExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFiAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFiFormulaItemParserRuleCall_0_0_0 = (RuleCall)cFiAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cMoAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cMoMathOperatorParserRuleCall_0_1_0_0 = (RuleCall)cMoAssignment_0_1_0.eContents().get(0);
		private final Assignment cFeAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cFeFormulaExpressionParserRuleCall_0_1_1_0 = (RuleCall)cFeAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFe1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFe1FormulaExpressionParserRuleCall_1_1_0 = (RuleCall)cFe1Assignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cMoAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cMoMathOperatorParserRuleCall_1_3_0_0 = (RuleCall)cMoAssignment_1_3_0.eContents().get(0);
		private final Assignment cFe2Assignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cFe2FormulaExpressionParserRuleCall_1_3_1_0 = (RuleCall)cFe2Assignment_1_3_1.eContents().get(0);
		
		//FormulaExpression:
		//	fi=FormulaItem (mo=MathOperator fe=FormulaExpression)? | "(" fe1=FormulaExpression ")" (mo=MathOperator
		//	fe2=FormulaExpression)?;
		public ParserRule getRule() { return rule; }

		//fi=FormulaItem (mo=MathOperator fe=FormulaExpression)? | "(" fe1=FormulaExpression ")" (mo=MathOperator
		//fe2=FormulaExpression)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//fi=FormulaItem (mo=MathOperator fe=FormulaExpression)?
		public Group getGroup_0() { return cGroup_0; }

		//fi=FormulaItem
		public Assignment getFiAssignment_0_0() { return cFiAssignment_0_0; }

		//FormulaItem
		public RuleCall getFiFormulaItemParserRuleCall_0_0_0() { return cFiFormulaItemParserRuleCall_0_0_0; }

		//(mo=MathOperator fe=FormulaExpression)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//mo=MathOperator
		public Assignment getMoAssignment_0_1_0() { return cMoAssignment_0_1_0; }

		//MathOperator
		public RuleCall getMoMathOperatorParserRuleCall_0_1_0_0() { return cMoMathOperatorParserRuleCall_0_1_0_0; }

		//fe=FormulaExpression
		public Assignment getFeAssignment_0_1_1() { return cFeAssignment_0_1_1; }

		//FormulaExpression
		public RuleCall getFeFormulaExpressionParserRuleCall_0_1_1_0() { return cFeFormulaExpressionParserRuleCall_0_1_1_0; }

		//"(" fe1=FormulaExpression ")" (mo=MathOperator fe2=FormulaExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//fe1=FormulaExpression
		public Assignment getFe1Assignment_1_1() { return cFe1Assignment_1_1; }

		//FormulaExpression
		public RuleCall getFe1FormulaExpressionParserRuleCall_1_1_0() { return cFe1FormulaExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//(mo=MathOperator fe2=FormulaExpression)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//mo=MathOperator
		public Assignment getMoAssignment_1_3_0() { return cMoAssignment_1_3_0; }

		//MathOperator
		public RuleCall getMoMathOperatorParserRuleCall_1_3_0_0() { return cMoMathOperatorParserRuleCall_1_3_0_0; }

		//fe2=FormulaExpression
		public Assignment getFe2Assignment_1_3_1() { return cFe2Assignment_1_3_1; }

		//FormulaExpression
		public RuleCall getFe2FormulaExpressionParserRuleCall_1_3_1_0() { return cFe2FormulaExpressionParserRuleCall_1_3_1_0; }
	}

	public class FormulaItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormulaItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTTermParserRuleCall_0_0 = (RuleCall)cTAssignment_0.eContents().get(0);
		private final Assignment cTiAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTiTermInstanceParserRuleCall_1_0 = (RuleCall)cTiAssignment_1.eContents().get(0);
		private final Assignment cTwaAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTwaTermWithAssociationParserRuleCall_2_0 = (RuleCall)cTwaAssignment_2.eContents().get(0);
		
		//FormulaItem:
		//	t=Term | ti=TermInstance | twa=TermWithAssociation;
		public ParserRule getRule() { return rule; }

		//t=Term | ti=TermInstance | twa=TermWithAssociation
		public Alternatives getAlternatives() { return cAlternatives; }

		//t=Term
		public Assignment getTAssignment_0() { return cTAssignment_0; }

		//Term
		public RuleCall getTTermParserRuleCall_0_0() { return cTTermParserRuleCall_0_0; }

		//ti=TermInstance
		public Assignment getTiAssignment_1() { return cTiAssignment_1; }

		//TermInstance
		public RuleCall getTiTermInstanceParserRuleCall_1_0() { return cTiTermInstanceParserRuleCall_1_0; }

		//twa=TermWithAssociation
		public Assignment getTwaAssignment_2() { return cTwaAssignment_2; }

		//TermWithAssociation
		public RuleCall getTwaTermWithAssociationParserRuleCall_2_0() { return cTwaTermWithAssociationParserRuleCall_2_0; }
	}

	public class MathOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSumAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSumPlusSignKeyword_0_0 = (Keyword)cSumAssignment_0.eContents().get(0);
		private final Assignment cSubtractAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSubtractHyphenMinusKeyword_1_0 = (Keyword)cSubtractAssignment_1.eContents().get(0);
		private final Assignment cDivideAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cDivideSolidusKeyword_2_0 = (Keyword)cDivideAssignment_2.eContents().get(0);
		private final Assignment cMultiplyAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cMultiplyAsteriskKeyword_3_0 = (Keyword)cMultiplyAssignment_3.eContents().get(0);
		private final Assignment cRAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cRPercentSignKeyword_4_0 = (Keyword)cRAssignment_4.eContents().get(0);
		private final Assignment cPAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cPAsteriskAsteriskKeyword_5_0 = (Keyword)cPAssignment_5.eContents().get(0);
		
		//MathOperator:
		//	sum="+" | subtract="-" | divide="/" | multiply="*" | r="%" | p="**";
		public ParserRule getRule() { return rule; }

		//sum="+" | subtract="-" | divide="/" | multiply="*" | r="%" | p="**"
		public Alternatives getAlternatives() { return cAlternatives; }

		//sum="+"
		public Assignment getSumAssignment_0() { return cSumAssignment_0; }

		//"+"
		public Keyword getSumPlusSignKeyword_0_0() { return cSumPlusSignKeyword_0_0; }

		//subtract="-"
		public Assignment getSubtractAssignment_1() { return cSubtractAssignment_1; }

		//"-"
		public Keyword getSubtractHyphenMinusKeyword_1_0() { return cSubtractHyphenMinusKeyword_1_0; }

		//divide="/"
		public Assignment getDivideAssignment_2() { return cDivideAssignment_2; }

		//"/"
		public Keyword getDivideSolidusKeyword_2_0() { return cDivideSolidusKeyword_2_0; }

		//multiply="*"
		public Assignment getMultiplyAssignment_3() { return cMultiplyAssignment_3; }

		//"*"
		public Keyword getMultiplyAsteriskKeyword_3_0() { return cMultiplyAsteriskKeyword_3_0; }

		//r="%"
		public Assignment getRAssignment_4() { return cRAssignment_4; }

		//"%"
		public Keyword getRPercentSignKeyword_4_0() { return cRPercentSignKeyword_4_0; }

		//p="**"
		public Assignment getPAssignment_5() { return cPAssignment_5; }

		//"**"
		public Keyword getPAsteriskAsteriskKeyword_5_0() { return cPAsteriskAsteriskKeyword_5_0; }
	}

	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cOGreaterThanSignKeyword_0_0 = (Keyword)cOAssignment_0.eContents().get(0);
		private final Assignment cOAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOLessThanSignKeyword_1_0 = (Keyword)cOAssignment_1.eContents().get(0);
		private final Assignment cOAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cOGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cOAssignment_2.eContents().get(0);
		private final Assignment cOAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cOLessThanSignEqualsSignKeyword_3_0 = (Keyword)cOAssignment_3.eContents().get(0);
		private final Assignment cNeoAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNeoNotEqualOperatorParserRuleCall_4_0 = (RuleCall)cNeoAssignment_4.eContents().get(0);
		
		//RelationalOperator:
		//	o=">" | o="<" | o=">=" | o="<=" | neo=NotEqualOperator;
		public ParserRule getRule() { return rule; }

		//o=">" | o="<" | o=">=" | o="<=" | neo=NotEqualOperator
		public Alternatives getAlternatives() { return cAlternatives; }

		//o=">"
		public Assignment getOAssignment_0() { return cOAssignment_0; }

		//">"
		public Keyword getOGreaterThanSignKeyword_0_0() { return cOGreaterThanSignKeyword_0_0; }

		//o="<"
		public Assignment getOAssignment_1() { return cOAssignment_1; }

		//"<"
		public Keyword getOLessThanSignKeyword_1_0() { return cOLessThanSignKeyword_1_0; }

		//o=">="
		public Assignment getOAssignment_2() { return cOAssignment_2; }

		//">="
		public Keyword getOGreaterThanSignEqualsSignKeyword_2_0() { return cOGreaterThanSignEqualsSignKeyword_2_0; }

		//o="<="
		public Assignment getOAssignment_3() { return cOAssignment_3; }

		//"<="
		public Keyword getOLessThanSignEqualsSignKeyword_3_0() { return cOLessThanSignEqualsSignKeyword_3_0; }

		//neo=NotEqualOperator
		public Assignment getNeoAssignment_4() { return cNeoAssignment_4; }

		//NotEqualOperator
		public RuleCall getNeoNotEqualOperatorParserRuleCall_4_0() { return cNeoNotEqualOperatorParserRuleCall_4_0; }
	}

	public class NotEqualOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotEqualOperator");
		private final Assignment cNeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNeExclamationMarkEqualsSignKeyword_0 = (Keyword)cNeAssignment.eContents().get(0);
		
		//NotEqualOperator:
		//	ne="!=";
		public ParserRule getRule() { return rule; }

		//ne="!="
		public Assignment getNeAssignment() { return cNeAssignment; }

		//"!="
		public Keyword getNeExclamationMarkEqualsSignKeyword_0() { return cNeExclamationMarkEqualsSignKeyword_0; }
	}

	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLListParserRuleCall_1_0 = (RuleCall)cLAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSSetParserRuleCall_3_1_0 = (RuleCall)cSAssignment_3_1.eContents().get(0);
		
		//Set:
		//	"{" l=List "}" ("," s=Set)?;
		public ParserRule getRule() { return rule; }

		//"{" l=List "}" ("," s=Set)?
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//l=List
		public Assignment getLAssignment_1() { return cLAssignment_1; }

		//List
		public RuleCall getLListParserRuleCall_1_0() { return cLListParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }

		//("," s=Set)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//s=Set
		public Assignment getSAssignment_3_1() { return cSAssignment_3_1; }

		//Set
		public RuleCall getSSetParserRuleCall_3_1_0() { return cSSetParserRuleCall_3_1_0; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cSlAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cSlStringLiteralParserRuleCall_0_0_0 = (RuleCall)cSlAssignment_0_0.eContents().get(0);
		private final Assignment cOlAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cOlOtherLiteralParserRuleCall_0_1_0 = (RuleCall)cOlAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLListParserRuleCall_1_1_0 = (RuleCall)cLAssignment_1_1.eContents().get(0);
		
		//List:
		//	(sl=StringLiteral | ol=OtherLiteral) ("," l=List)?;
		public ParserRule getRule() { return rule; }

		//(sl=StringLiteral | ol=OtherLiteral) ("," l=List)?
		public Group getGroup() { return cGroup; }

		//sl=StringLiteral | ol=OtherLiteral
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//sl=StringLiteral
		public Assignment getSlAssignment_0_0() { return cSlAssignment_0_0; }

		//StringLiteral
		public RuleCall getSlStringLiteralParserRuleCall_0_0_0() { return cSlStringLiteralParserRuleCall_0_0_0; }

		//ol=OtherLiteral
		public Assignment getOlAssignment_0_1() { return cOlAssignment_0_1; }

		//OtherLiteral
		public RuleCall getOlOtherLiteralParserRuleCall_0_1_0() { return cOlOtherLiteralParserRuleCall_0_1_0; }

		//("," l=List)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//l=List
		public Assignment getLAssignment_1_1() { return cLAssignment_1_1; }

		//List
		public RuleCall getLListParserRuleCall_1_1_0() { return cLListParserRuleCall_1_1_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//StringLiteral:
		//	STRING | "null";
		public ParserRule getRule() { return rule; }

		//STRING | "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class OtherLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMINUS_FLOATTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMINUS_INTEGERTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDATE_TIMETerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//OtherLiteral:
		//	FLOAT | MINUS_FLOAT | INT | MINUS_INTEGER | DATE_TIME;
		public ParserRule getRule() { return rule; }

		//FLOAT | MINUS_FLOAT | INT | MINUS_INTEGER | DATE_TIME
		public Alternatives getAlternatives() { return cAlternatives; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_0() { return cFLOATTerminalRuleCall_0; }

		//MINUS_FLOAT
		public RuleCall getMINUS_FLOATTerminalRuleCall_1() { return cMINUS_FLOATTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//MINUS_INTEGER
		public RuleCall getMINUS_INTEGERTerminalRuleCall_3() { return cMINUS_INTEGERTerminalRuleCall_3; }

		//DATE_TIME
		public RuleCall getDATE_TIMETerminalRuleCall_4() { return cDATE_TIMETerminalRuleCall_4; }
	}

	public class TestPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//TestPackage:
		//	"package" ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//"package" ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("." ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}
	
	
	private LetaElements pLeta;
	private TestCaseElements pTestCase;
	private VerifyClauseElements pVerifyClause;
	private WhenClauseElements pWhenClause;
	private SetClauseElements pSetClause;
	private FactCompositeElements pFactComposite;
	private LogicalOperatorElements pLogicalOperator;
	private FactElements pFact;
	private FactExtElements pFactExt;
	private TermCompositeElements pTermComposite;
	private TermElements pTerm;
	private TermInstanceElements pTermInstance;
	private TermWithAssociationElements pTermWithAssociation;
	private QuantifierElements pQuantifier;
	private ComplementElements pComplement;
	private FormulaElements pFormula;
	private FormulaExpressionElements pFormulaExpression;
	private FormulaItemElements pFormulaItem;
	private MathOperatorElements pMathOperator;
	private RelationalOperatorElements pRelationalOperator;
	private NotEqualOperatorElements pNotEqualOperator;
	private SetElements pSet;
	private ListElements pList;
	private StringLiteralElements pStringLiteral;
	private OtherLiteralElements pOtherLiteral;
	private TestPackageElements pTestPackage;
	private TerminalRule tDIGIT;
	private TerminalRule tMINUS_INTEGER;
	private TerminalRule tFLOAT;
	private TerminalRule tMINUS_FLOAT;
	private TerminalRule tDATE_TIME;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public LetaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Leta:
	//	tp=TestPackage? tc+=TestCase+;
	public LetaElements getLetaAccess() {
		return (pLeta != null) ? pLeta : (pLeta = new LetaElements());
	}
	
	public ParserRule getLetaRule() {
		return getLetaAccess().getRule();
	}

	//TestCase:
	//	"Test" id=ID v=VerifyClause w=WhenClause s=SetClause?;
	public TestCaseElements getTestCaseAccess() {
		return (pTestCase != null) ? pTestCase : (pTestCase = new TestCaseElements());
	}
	
	public ParserRule getTestCaseRule() {
		return getTestCaseAccess().getRule();
	}

	//VerifyClause:
	//	"verify" fc=FactComposite;
	public VerifyClauseElements getVerifyClauseAccess() {
		return (pVerifyClause != null) ? pVerifyClause : (pVerifyClause = new VerifyClauseElements());
	}
	
	public ParserRule getVerifyClauseRule() {
		return getVerifyClauseAccess().getRule();
	}

	//WhenClause:
	//	"when" fc=FactComposite;
	public WhenClauseElements getWhenClauseAccess() {
		return (pWhenClause != null) ? pWhenClause : (pWhenClause = new WhenClauseElements());
	}
	
	public ParserRule getWhenClauseRule() {
		return getWhenClauseAccess().getRule();
	}

	//SetClause:
	//	{Set} "set" "{" s=Set? "}";
	public SetClauseElements getSetClauseAccess() {
		return (pSetClause != null) ? pSetClause : (pSetClause = new SetClauseElements());
	}
	
	public ParserRule getSetClauseRule() {
		return getSetClauseAccess().getRule();
	}

	//FactComposite:
	//	(f=Fact | fo=Formula) (op=LogicalOperator fc=FactComposite)? | "(" fc1=FactComposite ")" (op=LogicalOperator
	//	fc2=FactComposite)?;
	public FactCompositeElements getFactCompositeAccess() {
		return (pFactComposite != null) ? pFactComposite : (pFactComposite = new FactCompositeElements());
	}
	
	public ParserRule getFactCompositeRule() {
		return getFactCompositeAccess().getRule();
	}

	//LogicalOperator:
	//	"and" | "or";
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return (pLogicalOperator != null) ? pLogicalOperator : (pLogicalOperator = new LogicalOperatorElements());
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}

	//Fact:
	//	termComposite=TermComposite complement=Complement (termComposite2=TermComposite factExt=FactExt?)?;
	public FactElements getFactAccess() {
		return (pFact != null) ? pFact : (pFact = new FactElements());
	}
	
	public ParserRule getFactRule() {
		return getFactAccess().getRule();
	}

	//FactExt:
	//	complement=Complement (termComposite=TermComposite factExt=FactExt?)?;
	public FactExtElements getFactExtAccess() {
		return (pFactExt != null) ? pFactExt : (pFactExt = new FactExtElements());
	}
	
	public ParserRule getFactExtRule() {
		return getFactExtAccess().getRule();
	}

	//TermComposite:
	//	quantifier=Quantifier? (term=Term | termInstance=TermInstance | termWithAssociation=TermWithAssociation);
	public TermCompositeElements getTermCompositeAccess() {
		return (pTermComposite != null) ? pTermComposite : (pTermComposite = new TermCompositeElements());
	}
	
	public ParserRule getTermCompositeRule() {
		return getTermCompositeAccess().getRule();
	}

	//Term:
	//	id=ID;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//TermInstance:
	//	term=Term notEqualOperator=NotEqualOperator? stringLiteral=StringLiteral | term=Term
	//	relationalOperator=RelationalOperator? otherLiteral=OtherLiteral;
	public TermInstanceElements getTermInstanceAccess() {
		return (pTermInstance != null) ? pTermInstance : (pTermInstance = new TermInstanceElements());
	}
	
	public ParserRule getTermInstanceRule() {
		return getTermInstanceAccess().getRule();
	}

	//TermWithAssociation:
	//	t=Term ro=RelationalOperator? "@" index=INT;
	public TermWithAssociationElements getTermWithAssociationAccess() {
		return (pTermWithAssociation != null) ? pTermWithAssociation : (pTermWithAssociation = new TermWithAssociationElements());
	}
	
	public ParserRule getTermWithAssociationRule() {
		return getTermWithAssociationAccess().getRule();
	}

	//Quantifier:
	//	"atleast" v=INT | "atmost" v=INT | "exactly" v=INT | "atleastandatmost" v1=INT v2=INT;
	public QuantifierElements getQuantifierAccess() {
		return (pQuantifier != null) ? pQuantifier : (pQuantifier = new QuantifierElements());
	}
	
	public ParserRule getQuantifierRule() {
		return getQuantifierAccess().getRule();
	}

	//Complement:
	//	id=ID;
	public ComplementElements getComplementAccess() {
		return (pComplement != null) ? pComplement : (pComplement = new ComplementElements());
	}
	
	public ParserRule getComplementRule() {
		return getComplementAccess().getRule();
	}

	//Formula:
	//	fi=FormulaItem "=" fe=FormulaExpression;
	public FormulaElements getFormulaAccess() {
		return (pFormula != null) ? pFormula : (pFormula = new FormulaElements());
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}

	//FormulaExpression:
	//	fi=FormulaItem (mo=MathOperator fe=FormulaExpression)? | "(" fe1=FormulaExpression ")" (mo=MathOperator
	//	fe2=FormulaExpression)?;
	public FormulaExpressionElements getFormulaExpressionAccess() {
		return (pFormulaExpression != null) ? pFormulaExpression : (pFormulaExpression = new FormulaExpressionElements());
	}
	
	public ParserRule getFormulaExpressionRule() {
		return getFormulaExpressionAccess().getRule();
	}

	//FormulaItem:
	//	t=Term | ti=TermInstance | twa=TermWithAssociation;
	public FormulaItemElements getFormulaItemAccess() {
		return (pFormulaItem != null) ? pFormulaItem : (pFormulaItem = new FormulaItemElements());
	}
	
	public ParserRule getFormulaItemRule() {
		return getFormulaItemAccess().getRule();
	}

	//MathOperator:
	//	sum="+" | subtract="-" | divide="/" | multiply="*" | r="%" | p="**";
	public MathOperatorElements getMathOperatorAccess() {
		return (pMathOperator != null) ? pMathOperator : (pMathOperator = new MathOperatorElements());
	}
	
	public ParserRule getMathOperatorRule() {
		return getMathOperatorAccess().getRule();
	}

	//RelationalOperator:
	//	o=">" | o="<" | o=">=" | o="<=" | neo=NotEqualOperator;
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (pRelationalOperator != null) ? pRelationalOperator : (pRelationalOperator = new RelationalOperatorElements());
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//NotEqualOperator:
	//	ne="!=";
	public NotEqualOperatorElements getNotEqualOperatorAccess() {
		return (pNotEqualOperator != null) ? pNotEqualOperator : (pNotEqualOperator = new NotEqualOperatorElements());
	}
	
	public ParserRule getNotEqualOperatorRule() {
		return getNotEqualOperatorAccess().getRule();
	}

	//Set:
	//	"{" l=List "}" ("," s=Set)?;
	public SetElements getSetAccess() {
		return (pSet != null) ? pSet : (pSet = new SetElements());
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}

	//List:
	//	(sl=StringLiteral | ol=OtherLiteral) ("," l=List)?;
	public ListElements getListAccess() {
		return (pList != null) ? pList : (pList = new ListElements());
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//StringLiteral:
	//	STRING | "null";
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//OtherLiteral:
	//	FLOAT | MINUS_FLOAT | INT | MINUS_INTEGER | DATE_TIME;
	public OtherLiteralElements getOtherLiteralAccess() {
		return (pOtherLiteral != null) ? pOtherLiteral : (pOtherLiteral = new OtherLiteralElements());
	}
	
	public ParserRule getOtherLiteralRule() {
		return getOtherLiteralAccess().getRule();
	}

	//TestPackage:
	//	"package" ID ("." ID)*;
	public TestPackageElements getTestPackageAccess() {
		return (pTestPackage != null) ? pTestPackage : (pTestPackage = new TestPackageElements());
	}
	
	public ParserRule getTestPackageRule() {
		return getTestPackageAccess().getRule();
	}

	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return (tDIGIT != null) ? tDIGIT : (tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT"));
	} 

	//terminal MINUS_INTEGER:
	//	"-" DIGIT+;
	public TerminalRule getMINUS_INTEGERRule() {
		return (tMINUS_INTEGER != null) ? tMINUS_INTEGER : (tMINUS_INTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS_INTEGER"));
	} 

	//terminal FLOAT:
	//	DIGIT+ "." DIGIT*;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal MINUS_FLOAT:
	//	"-" DIGIT+ "." DIGIT*;
	public TerminalRule getMINUS_FLOATRule() {
		return (tMINUS_FLOAT != null) ? tMINUS_FLOAT : (tMINUS_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS_FLOAT"));
	} 

	//terminal DATE_TIME:
	//	"[" DIGIT+ ("-" DIGIT+ ("-" DIGIT+)?)? (" " DIGIT+ ":" DIGIT+ (":" DIGIT+ ("." DIGIT+)?)? ("AM" | "PM")? (("+" | "-")
	//	DIGIT+ ":" DIGIT+)?)? "]";
	public TerminalRule getDATE_TIMERule() {
		return (tDATE_TIME != null) ? tDATE_TIME : (tDATE_TIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE_TIME"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
