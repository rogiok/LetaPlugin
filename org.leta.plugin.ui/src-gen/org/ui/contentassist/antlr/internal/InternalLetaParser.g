/*
* generated by Xtext
*/
parser grammar InternalLetaParser;

options {
	tokenVocab=InternalLetaLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package org.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.services.LetaGrammarAccess;

}

@members {
 
 	private LetaGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("KEYWORD_1", "'\%'");
		tokenNameToValue.put("KEYWORD_2", "'('");
		tokenNameToValue.put("KEYWORD_3", "')'");
		tokenNameToValue.put("KEYWORD_4", "'*'");
		tokenNameToValue.put("KEYWORD_5", "'+'");
		tokenNameToValue.put("KEYWORD_6", "','");
		tokenNameToValue.put("KEYWORD_7", "'-'");
		tokenNameToValue.put("KEYWORD_8", "'.'");
		tokenNameToValue.put("KEYWORD_9", "'/'");
		tokenNameToValue.put("KEYWORD_10", "'<'");
		tokenNameToValue.put("KEYWORD_11", "'='");
		tokenNameToValue.put("KEYWORD_12", "'>'");
		tokenNameToValue.put("KEYWORD_13", "'@'");
		tokenNameToValue.put("KEYWORD_14", "'{'");
		tokenNameToValue.put("KEYWORD_15", "'}'");
		tokenNameToValue.put("KEYWORD_16", "'!='");
		tokenNameToValue.put("KEYWORD_17", "'**'");
		tokenNameToValue.put("KEYWORD_18", "'<='");
		tokenNameToValue.put("KEYWORD_19", "'>='");
		tokenNameToValue.put("KEYWORD_20", "'or'");
		tokenNameToValue.put("KEYWORD_21", "'and'");
		tokenNameToValue.put("KEYWORD_22", "'set'");
		tokenNameToValue.put("KEYWORD_23", "'Test'");
		tokenNameToValue.put("KEYWORD_24", "'null'");
		tokenNameToValue.put("KEYWORD_25", "'when'");
		tokenNameToValue.put("KEYWORD_26", "'atmost'");
		tokenNameToValue.put("KEYWORD_27", "'verify'");
		tokenNameToValue.put("KEYWORD_28", "'atleast'");
		tokenNameToValue.put("KEYWORD_29", "'exactly'");
		tokenNameToValue.put("KEYWORD_30", "'package'");
		tokenNameToValue.put("KEYWORD_31", "'atleastandatmost'");
 	}
 	
    public void setGrammarAccess(LetaGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleLeta
entryRuleLeta 
:
{ before(grammarAccess.getLetaRule()); }
	 ruleLeta
{ after(grammarAccess.getLetaRule()); } 
	 EOF 
;

// Rule Leta
ruleLeta 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLetaAccess().getGroup()); }
(rule__Leta__Group__0)
{ after(grammarAccess.getLetaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestCase
entryRuleTestCase 
:
{ before(grammarAccess.getTestCaseRule()); }
	 ruleTestCase
{ after(grammarAccess.getTestCaseRule()); } 
	 EOF 
;

// Rule TestCase
ruleTestCase 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTestCaseAccess().getGroup()); }
(rule__TestCase__Group__0)
{ after(grammarAccess.getTestCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVerifyClause
entryRuleVerifyClause 
:
{ before(grammarAccess.getVerifyClauseRule()); }
	 ruleVerifyClause
{ after(grammarAccess.getVerifyClauseRule()); } 
	 EOF 
;

// Rule VerifyClause
ruleVerifyClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVerifyClauseAccess().getGroup()); }
(rule__VerifyClause__Group__0)
{ after(grammarAccess.getVerifyClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhenClause
entryRuleWhenClause 
:
{ before(grammarAccess.getWhenClauseRule()); }
	 ruleWhenClause
{ after(grammarAccess.getWhenClauseRule()); } 
	 EOF 
;

// Rule WhenClause
ruleWhenClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWhenClauseAccess().getGroup()); }
(rule__WhenClause__Group__0)
{ after(grammarAccess.getWhenClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetClause
entryRuleSetClause 
:
{ before(grammarAccess.getSetClauseRule()); }
	 ruleSetClause
{ after(grammarAccess.getSetClauseRule()); } 
	 EOF 
;

// Rule SetClause
ruleSetClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSetClauseAccess().getGroup()); }
(rule__SetClause__Group__0)
{ after(grammarAccess.getSetClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFactComposite
entryRuleFactComposite 
:
{ before(grammarAccess.getFactCompositeRule()); }
	 ruleFactComposite
{ after(grammarAccess.getFactCompositeRule()); } 
	 EOF 
;

// Rule FactComposite
ruleFactComposite 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFactCompositeAccess().getAlternatives()); }
(rule__FactComposite__Alternatives)
{ after(grammarAccess.getFactCompositeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator 
:
{ before(grammarAccess.getLogicalOperatorRule()); }
	 ruleLogicalOperator
{ after(grammarAccess.getLogicalOperatorRule()); } 
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
(rule__LogicalOperator__Alternatives)
{ after(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFact
entryRuleFact 
:
{ before(grammarAccess.getFactRule()); }
	 ruleFact
{ after(grammarAccess.getFactRule()); } 
	 EOF 
;

// Rule Fact
ruleFact 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFactAccess().getGroup()); }
(rule__Fact__Group__0)
{ after(grammarAccess.getFactAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFactExt
entryRuleFactExt 
:
{ before(grammarAccess.getFactExtRule()); }
	 ruleFactExt
{ after(grammarAccess.getFactExtRule()); } 
	 EOF 
;

// Rule FactExt
ruleFactExt 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFactExtAccess().getGroup()); }
(rule__FactExt__Group__0)
{ after(grammarAccess.getFactExtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTermComposite
entryRuleTermComposite 
:
{ before(grammarAccess.getTermCompositeRule()); }
	 ruleTermComposite
{ after(grammarAccess.getTermCompositeRule()); } 
	 EOF 
;

// Rule TermComposite
ruleTermComposite 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTermCompositeAccess().getGroup()); }
(rule__TermComposite__Group__0)
{ after(grammarAccess.getTermCompositeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTermAccess().getIdAssignment()); }
(rule__Term__IdAssignment)
{ after(grammarAccess.getTermAccess().getIdAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTermInstance
entryRuleTermInstance 
:
{ before(grammarAccess.getTermInstanceRule()); }
	 ruleTermInstance
{ after(grammarAccess.getTermInstanceRule()); } 
	 EOF 
;

// Rule TermInstance
ruleTermInstance 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTermInstanceAccess().getAlternatives()); }
(rule__TermInstance__Alternatives)
{ after(grammarAccess.getTermInstanceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTermWithAssociation
entryRuleTermWithAssociation 
:
{ before(grammarAccess.getTermWithAssociationRule()); }
	 ruleTermWithAssociation
{ after(grammarAccess.getTermWithAssociationRule()); } 
	 EOF 
;

// Rule TermWithAssociation
ruleTermWithAssociation 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTermWithAssociationAccess().getGroup()); }
(rule__TermWithAssociation__Group__0)
{ after(grammarAccess.getTermWithAssociationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantifier
entryRuleQuantifier 
:
{ before(grammarAccess.getQuantifierRule()); }
	 ruleQuantifier
{ after(grammarAccess.getQuantifierRule()); } 
	 EOF 
;

// Rule Quantifier
ruleQuantifier 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQuantifierAccess().getAlternatives()); }
(rule__Quantifier__Alternatives)
{ after(grammarAccess.getQuantifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComplement
entryRuleComplement 
:
{ before(grammarAccess.getComplementRule()); }
	 ruleComplement
{ after(grammarAccess.getComplementRule()); } 
	 EOF 
;

// Rule Complement
ruleComplement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComplementAccess().getIdAssignment()); }
(rule__Complement__IdAssignment)
{ after(grammarAccess.getComplementAccess().getIdAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFormula
entryRuleFormula 
:
{ before(grammarAccess.getFormulaRule()); }
	 ruleFormula
{ after(grammarAccess.getFormulaRule()); } 
	 EOF 
;

// Rule Formula
ruleFormula 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFormulaAccess().getGroup()); }
(rule__Formula__Group__0)
{ after(grammarAccess.getFormulaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFormulaExpression
entryRuleFormulaExpression 
:
{ before(grammarAccess.getFormulaExpressionRule()); }
	 ruleFormulaExpression
{ after(grammarAccess.getFormulaExpressionRule()); } 
	 EOF 
;

// Rule FormulaExpression
ruleFormulaExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFormulaExpressionAccess().getAlternatives()); }
(rule__FormulaExpression__Alternatives)
{ after(grammarAccess.getFormulaExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFormulaItem
entryRuleFormulaItem 
:
{ before(grammarAccess.getFormulaItemRule()); }
	 ruleFormulaItem
{ after(grammarAccess.getFormulaItemRule()); } 
	 EOF 
;

// Rule FormulaItem
ruleFormulaItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFormulaItemAccess().getAlternatives()); }
(rule__FormulaItem__Alternatives)
{ after(grammarAccess.getFormulaItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMathOperator
entryRuleMathOperator 
:
{ before(grammarAccess.getMathOperatorRule()); }
	 ruleMathOperator
{ after(grammarAccess.getMathOperatorRule()); } 
	 EOF 
;

// Rule MathOperator
ruleMathOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMathOperatorAccess().getAlternatives()); }
(rule__MathOperator__Alternatives)
{ after(grammarAccess.getMathOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator 
:
{ before(grammarAccess.getRelationalOperatorRule()); }
	 ruleRelationalOperator
{ after(grammarAccess.getRelationalOperatorRule()); } 
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotEqualOperator
entryRuleNotEqualOperator 
:
{ before(grammarAccess.getNotEqualOperatorRule()); }
	 ruleNotEqualOperator
{ after(grammarAccess.getNotEqualOperatorRule()); } 
	 EOF 
;

// Rule NotEqualOperator
ruleNotEqualOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNotEqualOperatorAccess().getNeAssignment()); }
(rule__NotEqualOperator__NeAssignment)
{ after(grammarAccess.getNotEqualOperatorAccess().getNeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSet
entryRuleSet 
:
{ before(grammarAccess.getSetRule()); }
	 ruleSet
{ after(grammarAccess.getSetRule()); } 
	 EOF 
;

// Rule Set
ruleSet 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSetAccess().getGroup()); }
(rule__Set__Group__0)
{ after(grammarAccess.getSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleList
entryRuleList 
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getListAccess().getGroup()); }
(rule__List__Group__0)
{ after(grammarAccess.getListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStringLiteralAccess().getAlternatives()); }
(rule__StringLiteral__Alternatives)
{ after(grammarAccess.getStringLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOtherLiteral
entryRuleOtherLiteral 
:
{ before(grammarAccess.getOtherLiteralRule()); }
	 ruleOtherLiteral
{ after(grammarAccess.getOtherLiteralRule()); } 
	 EOF 
;

// Rule OtherLiteral
ruleOtherLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOtherLiteralAccess().getAlternatives()); }
(rule__OtherLiteral__Alternatives)
{ after(grammarAccess.getOtherLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestPackage
entryRuleTestPackage 
:
{ before(grammarAccess.getTestPackageRule()); }
	 ruleTestPackage
{ after(grammarAccess.getTestPackageRule()); } 
	 EOF 
;

// Rule TestPackage
ruleTestPackage 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTestPackageAccess().getGroup()); }
(rule__TestPackage__Group__0)
{ after(grammarAccess.getTestPackageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__FactComposite__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getGroup_0()); }
(rule__FactComposite__Group_0__0)
{ after(grammarAccess.getFactCompositeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFactCompositeAccess().getGroup_1()); }
(rule__FactComposite__Group_1__0)
{ after(grammarAccess.getFactCompositeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Alternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getFAssignment_0_0_0()); }
(rule__FactComposite__FAssignment_0_0_0)
{ after(grammarAccess.getFactCompositeAccess().getFAssignment_0_0_0()); }
)

    |(
{ before(grammarAccess.getFactCompositeAccess().getFoAssignment_0_0_1()); }
(rule__FactComposite__FoAssignment_0_0_1)
{ after(grammarAccess.getFactCompositeAccess().getFoAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperatorAccess().getAndKeyword_0()); }

	KEYWORD_21 

{ after(grammarAccess.getLogicalOperatorAccess().getAndKeyword_0()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getOrKeyword_1()); }

	KEYWORD_20 

{ after(grammarAccess.getLogicalOperatorAccess().getOrKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermComposite__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermCompositeAccess().getTermAssignment_1_0()); }
(rule__TermComposite__TermAssignment_1_0)
{ after(grammarAccess.getTermCompositeAccess().getTermAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getTermCompositeAccess().getTermInstanceAssignment_1_1()); }
(rule__TermComposite__TermInstanceAssignment_1_1)
{ after(grammarAccess.getTermCompositeAccess().getTermInstanceAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getTermCompositeAccess().getTermWithAssociationAssignment_1_2()); }
(rule__TermComposite__TermWithAssociationAssignment_1_2)
{ after(grammarAccess.getTermCompositeAccess().getTermWithAssociationAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getGroup_0()); }
(rule__TermInstance__Group_0__0)
{ after(grammarAccess.getTermInstanceAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTermInstanceAccess().getGroup_1()); }
(rule__TermInstance__Group_1__0)
{ after(grammarAccess.getTermInstanceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getGroup_0()); }
(rule__Quantifier__Group_0__0)
{ after(grammarAccess.getQuantifierAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getQuantifierAccess().getGroup_1()); }
(rule__Quantifier__Group_1__0)
{ after(grammarAccess.getQuantifierAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getQuantifierAccess().getGroup_2()); }
(rule__Quantifier__Group_2__0)
{ after(grammarAccess.getQuantifierAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getQuantifierAccess().getGroup_3()); }
(rule__Quantifier__Group_3__0)
{ after(grammarAccess.getQuantifierAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getGroup_0()); }
(rule__FormulaExpression__Group_0__0)
{ after(grammarAccess.getFormulaExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFormulaExpressionAccess().getGroup_1()); }
(rule__FormulaExpression__Group_1__0)
{ after(grammarAccess.getFormulaExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaItemAccess().getTAssignment_0()); }
(rule__FormulaItem__TAssignment_0)
{ after(grammarAccess.getFormulaItemAccess().getTAssignment_0()); }
)

    |(
{ before(grammarAccess.getFormulaItemAccess().getTiAssignment_1()); }
(rule__FormulaItem__TiAssignment_1)
{ after(grammarAccess.getFormulaItemAccess().getTiAssignment_1()); }
)

    |(
{ before(grammarAccess.getFormulaItemAccess().getTwaAssignment_2()); }
(rule__FormulaItem__TwaAssignment_2)
{ after(grammarAccess.getFormulaItemAccess().getTwaAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathOperatorAccess().getSumAssignment_0()); }
(rule__MathOperator__SumAssignment_0)
{ after(grammarAccess.getMathOperatorAccess().getSumAssignment_0()); }
)

    |(
{ before(grammarAccess.getMathOperatorAccess().getSubtractAssignment_1()); }
(rule__MathOperator__SubtractAssignment_1)
{ after(grammarAccess.getMathOperatorAccess().getSubtractAssignment_1()); }
)

    |(
{ before(grammarAccess.getMathOperatorAccess().getDivideAssignment_2()); }
(rule__MathOperator__DivideAssignment_2)
{ after(grammarAccess.getMathOperatorAccess().getDivideAssignment_2()); }
)

    |(
{ before(grammarAccess.getMathOperatorAccess().getMultiplyAssignment_3()); }
(rule__MathOperator__MultiplyAssignment_3)
{ after(grammarAccess.getMathOperatorAccess().getMultiplyAssignment_3()); }
)

    |(
{ before(grammarAccess.getMathOperatorAccess().getRAssignment_4()); }
(rule__MathOperator__RAssignment_4)
{ after(grammarAccess.getMathOperatorAccess().getRAssignment_4()); }
)

    |(
{ before(grammarAccess.getMathOperatorAccess().getPAssignment_5()); }
(rule__MathOperator__PAssignment_5)
{ after(grammarAccess.getMathOperatorAccess().getPAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getOAssignment_0()); }
(rule__RelationalOperator__OAssignment_0)
{ after(grammarAccess.getRelationalOperatorAccess().getOAssignment_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getOAssignment_1()); }
(rule__RelationalOperator__OAssignment_1)
{ after(grammarAccess.getRelationalOperatorAccess().getOAssignment_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getOAssignment_2()); }
(rule__RelationalOperator__OAssignment_2)
{ after(grammarAccess.getRelationalOperatorAccess().getOAssignment_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getOAssignment_3()); }
(rule__RelationalOperator__OAssignment_3)
{ after(grammarAccess.getRelationalOperatorAccess().getOAssignment_3()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getNeoAssignment_4()); }
(rule__RelationalOperator__NeoAssignment_4)
{ after(grammarAccess.getRelationalOperatorAccess().getNeoAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getSlAssignment_0_0()); }
(rule__List__SlAssignment_0_0)
{ after(grammarAccess.getListAccess().getSlAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getListAccess().getOlAssignment_0_1()); }
(rule__List__OlAssignment_0_1)
{ after(grammarAccess.getListAccess().getOlAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStringLiteralAccess().getNullKeyword_1()); }

	KEYWORD_24 

{ after(grammarAccess.getStringLiteralAccess().getNullKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OtherLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherLiteralAccess().getFLOATTerminalRuleCall_0()); }
	RULE_FLOAT
{ after(grammarAccess.getOtherLiteralAccess().getFLOATTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOtherLiteralAccess().getMINUS_FLOATTerminalRuleCall_1()); }
	RULE_MINUS_FLOAT
{ after(grammarAccess.getOtherLiteralAccess().getMINUS_FLOATTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getOtherLiteralAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getOtherLiteralAccess().getINTTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getOtherLiteralAccess().getMINUS_INTEGERTerminalRuleCall_3()); }
	RULE_MINUS_INTEGER
{ after(grammarAccess.getOtherLiteralAccess().getMINUS_INTEGERTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getOtherLiteralAccess().getDATE_TIMETerminalRuleCall_4()); }
	RULE_DATE_TIME
{ after(grammarAccess.getOtherLiteralAccess().getDATE_TIMETerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Leta__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Leta__Group__0__Impl
	rule__Leta__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Leta__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetaAccess().getTpAssignment_0()); }
(rule__Leta__TpAssignment_0)?
{ after(grammarAccess.getLetaAccess().getTpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Leta__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Leta__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Leta__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getLetaAccess().getTcAssignment_1()); }
(rule__Leta__TcAssignment_1)
{ after(grammarAccess.getLetaAccess().getTcAssignment_1()); }
)
(
{ before(grammarAccess.getLetaAccess().getTcAssignment_1()); }
(rule__Leta__TcAssignment_1)*
{ after(grammarAccess.getLetaAccess().getTcAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TestCase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCase__Group__0__Impl
	rule__TestCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestCaseAccess().getTestKeyword_0()); }

	KEYWORD_23 

{ after(grammarAccess.getTestCaseAccess().getTestKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCase__Group__1__Impl
	rule__TestCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestCaseAccess().getIdAssignment_1()); }
(rule__TestCase__IdAssignment_1)
{ after(grammarAccess.getTestCaseAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCase__Group__2__Impl
	rule__TestCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestCaseAccess().getVAssignment_2()); }
(rule__TestCase__VAssignment_2)
{ after(grammarAccess.getTestCaseAccess().getVAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCase__Group__3__Impl
	rule__TestCase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestCaseAccess().getWAssignment_3()); }
(rule__TestCase__WAssignment_3)
{ after(grammarAccess.getTestCaseAccess().getWAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCase__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCase__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestCaseAccess().getSAssignment_4()); }
(rule__TestCase__SAssignment_4)?
{ after(grammarAccess.getTestCaseAccess().getSAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VerifyClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerifyClause__Group__0__Impl
	rule__VerifyClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyClauseAccess().getVerifyKeyword_0()); }

	KEYWORD_27 

{ after(grammarAccess.getVerifyClauseAccess().getVerifyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerifyClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerifyClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyClauseAccess().getFcAssignment_1()); }
(rule__VerifyClause__FcAssignment_1)
{ after(grammarAccess.getVerifyClauseAccess().getFcAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhenClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhenClause__Group__0__Impl
	rule__WhenClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenClauseAccess().getWhenKeyword_0()); }

	KEYWORD_25 

{ after(grammarAccess.getWhenClauseAccess().getWhenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhenClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhenClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenClauseAccess().getFcAssignment_1()); }
(rule__WhenClause__FcAssignment_1)
{ after(grammarAccess.getWhenClauseAccess().getFcAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SetClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group__0__Impl
	rule__SetClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getSetAction_0()); }
(

)
{ after(grammarAccess.getSetClauseAccess().getSetAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group__1__Impl
	rule__SetClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getSetKeyword_1()); }

	KEYWORD_22 

{ after(grammarAccess.getSetClauseAccess().getSetKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group__2__Impl
	rule__SetClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_14 

{ after(grammarAccess.getSetClauseAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group__3__Impl
	rule__SetClause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getSAssignment_3()); }
(rule__SetClause__SAssignment_3)?
{ after(grammarAccess.getSetClauseAccess().getSAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetClause__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetClause__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_15 

{ after(grammarAccess.getSetClauseAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FactComposite__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactComposite__Group_0__0__Impl
	rule__FactComposite__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getAlternatives_0_0()); }
(rule__FactComposite__Alternatives_0_0)
{ after(grammarAccess.getFactCompositeAccess().getAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactComposite__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactComposite__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getGroup_0_1()); }
(rule__FactComposite__Group_0_1__0)?
{ after(grammarAccess.getFactCompositeAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FactComposite__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactComposite__Group_0_1__0__Impl
	rule__FactComposite__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getOpAssignment_0_1_0()); }
(rule__FactComposite__OpAssignment_0_1_0)
{ after(grammarAccess.getFactCompositeAccess().getOpAssignment_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactComposite__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactComposite__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getFcAssignment_0_1_1()); }
(rule__FactComposite__FcAssignment_0_1_1)
{ after(grammarAccess.getFactCompositeAccess().getFcAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FactComposite__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactComposite__Group_1__0__Impl
	rule__FactComposite__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getLeftParenthesisKeyword_1_0()); }

	KEYWORD_2 

{ after(grammarAccess.getFactCompositeAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactComposite__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactComposite__Group_1__1__Impl
	rule__FactComposite__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getFc1Assignment_1_1()); }
(rule__FactComposite__Fc1Assignment_1_1)
{ after(grammarAccess.getFactCompositeAccess().getFc1Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactComposite__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactComposite__Group_1__2__Impl
	rule__FactComposite__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getRightParenthesisKeyword_1_2()); }

	KEYWORD_3 

{ after(grammarAccess.getFactCompositeAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactComposite__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactComposite__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getGroup_1_3()); }
(rule__FactComposite__Group_1_3__0)?
{ after(grammarAccess.getFactCompositeAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FactComposite__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactComposite__Group_1_3__0__Impl
	rule__FactComposite__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getOpAssignment_1_3_0()); }
(rule__FactComposite__OpAssignment_1_3_0)
{ after(grammarAccess.getFactCompositeAccess().getOpAssignment_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactComposite__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactComposite__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getFc2Assignment_1_3_1()); }
(rule__FactComposite__Fc2Assignment_1_3_1)
{ after(grammarAccess.getFactCompositeAccess().getFc2Assignment_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fact__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group__0__Impl
	rule__Fact__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getTermCompositeAssignment_0()); }
(rule__Fact__TermCompositeAssignment_0)
{ after(grammarAccess.getFactAccess().getTermCompositeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fact__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group__1__Impl
	rule__Fact__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getComplementAssignment_1()); }
(rule__Fact__ComplementAssignment_1)
{ after(grammarAccess.getFactAccess().getComplementAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fact__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getGroup_2()); }
(rule__Fact__Group_2__0)?
{ after(grammarAccess.getFactAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Fact__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group_2__0__Impl
	rule__Fact__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getTermComposite2Assignment_2_0()); }
(rule__Fact__TermComposite2Assignment_2_0)
{ after(grammarAccess.getFactAccess().getTermComposite2Assignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fact__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getFactExtAssignment_2_1()); }
(rule__Fact__FactExtAssignment_2_1)?
{ after(grammarAccess.getFactAccess().getFactExtAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FactExt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactExt__Group__0__Impl
	rule__FactExt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FactExt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactExtAccess().getComplementAssignment_0()); }
(rule__FactExt__ComplementAssignment_0)
{ after(grammarAccess.getFactExtAccess().getComplementAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactExt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactExt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FactExt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactExtAccess().getGroup_1()); }
(rule__FactExt__Group_1__0)?
{ after(grammarAccess.getFactExtAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FactExt__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactExt__Group_1__0__Impl
	rule__FactExt__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FactExt__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactExtAccess().getTermCompositeAssignment_1_0()); }
(rule__FactExt__TermCompositeAssignment_1_0)
{ after(grammarAccess.getFactExtAccess().getTermCompositeAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactExt__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactExt__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FactExt__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactExtAccess().getFactExtAssignment_1_1()); }
(rule__FactExt__FactExtAssignment_1_1)?
{ after(grammarAccess.getFactExtAccess().getFactExtAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TermComposite__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermComposite__Group__0__Impl
	rule__TermComposite__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TermComposite__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermCompositeAccess().getQuantifierAssignment_0()); }
(rule__TermComposite__QuantifierAssignment_0)?
{ after(grammarAccess.getTermCompositeAccess().getQuantifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TermComposite__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermComposite__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TermComposite__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermCompositeAccess().getAlternatives_1()); }
(rule__TermComposite__Alternatives_1)
{ after(grammarAccess.getTermCompositeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TermInstance__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermInstance__Group_0__0__Impl
	rule__TermInstance__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getTermAssignment_0_0()); }
(rule__TermInstance__TermAssignment_0_0)
{ after(grammarAccess.getTermInstanceAccess().getTermAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TermInstance__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermInstance__Group_0__1__Impl
	rule__TermInstance__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getNotEqualOperatorAssignment_0_1()); }
(rule__TermInstance__NotEqualOperatorAssignment_0_1)?
{ after(grammarAccess.getTermInstanceAccess().getNotEqualOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TermInstance__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermInstance__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getStringLiteralAssignment_0_2()); }
(rule__TermInstance__StringLiteralAssignment_0_2)
{ after(grammarAccess.getTermInstanceAccess().getStringLiteralAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TermInstance__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermInstance__Group_1__0__Impl
	rule__TermInstance__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getTermAssignment_1_0()); }
(rule__TermInstance__TermAssignment_1_0)
{ after(grammarAccess.getTermInstanceAccess().getTermAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TermInstance__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermInstance__Group_1__1__Impl
	rule__TermInstance__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getRelationalOperatorAssignment_1_1()); }
(rule__TermInstance__RelationalOperatorAssignment_1_1)?
{ after(grammarAccess.getTermInstanceAccess().getRelationalOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TermInstance__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermInstance__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getOtherLiteralAssignment_1_2()); }
(rule__TermInstance__OtherLiteralAssignment_1_2)
{ after(grammarAccess.getTermInstanceAccess().getOtherLiteralAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TermWithAssociation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermWithAssociation__Group__0__Impl
	rule__TermWithAssociation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TermWithAssociation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermWithAssociationAccess().getTAssignment_0()); }
(rule__TermWithAssociation__TAssignment_0)
{ after(grammarAccess.getTermWithAssociationAccess().getTAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TermWithAssociation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermWithAssociation__Group__1__Impl
	rule__TermWithAssociation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TermWithAssociation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermWithAssociationAccess().getRoAssignment_1()); }
(rule__TermWithAssociation__RoAssignment_1)?
{ after(grammarAccess.getTermWithAssociationAccess().getRoAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TermWithAssociation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermWithAssociation__Group__2__Impl
	rule__TermWithAssociation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TermWithAssociation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermWithAssociationAccess().getCommercialAtKeyword_2()); }

	KEYWORD_13 

{ after(grammarAccess.getTermWithAssociationAccess().getCommercialAtKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TermWithAssociation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermWithAssociation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TermWithAssociation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermWithAssociationAccess().getIndexAssignment_3()); }
(rule__TermWithAssociation__IndexAssignment_3)
{ after(grammarAccess.getTermWithAssociationAccess().getIndexAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Quantifier__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group_0__0__Impl
	rule__Quantifier__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getAtleastKeyword_0_0()); }

	KEYWORD_28 

{ after(grammarAccess.getQuantifierAccess().getAtleastKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantifier__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getVAssignment_0_1()); }
(rule__Quantifier__VAssignment_0_1)
{ after(grammarAccess.getQuantifierAccess().getVAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Quantifier__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group_1__0__Impl
	rule__Quantifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getAtmostKeyword_1_0()); }

	KEYWORD_26 

{ after(grammarAccess.getQuantifierAccess().getAtmostKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantifier__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getVAssignment_1_1()); }
(rule__Quantifier__VAssignment_1_1)
{ after(grammarAccess.getQuantifierAccess().getVAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Quantifier__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group_2__0__Impl
	rule__Quantifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getExactlyKeyword_2_0()); }

	KEYWORD_29 

{ after(grammarAccess.getQuantifierAccess().getExactlyKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantifier__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getVAssignment_2_1()); }
(rule__Quantifier__VAssignment_2_1)
{ after(grammarAccess.getQuantifierAccess().getVAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Quantifier__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group_3__0__Impl
	rule__Quantifier__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getAtleastandatmostKeyword_3_0()); }

	KEYWORD_31 

{ after(grammarAccess.getQuantifierAccess().getAtleastandatmostKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantifier__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group_3__1__Impl
	rule__Quantifier__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getV1Assignment_3_1()); }
(rule__Quantifier__V1Assignment_3_1)
{ after(grammarAccess.getQuantifierAccess().getV1Assignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantifier__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getV2Assignment_3_2()); }
(rule__Quantifier__V2Assignment_3_2)
{ after(grammarAccess.getQuantifierAccess().getV2Assignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Formula__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formula__Group__0__Impl
	rule__Formula__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getFiAssignment_0()); }
(rule__Formula__FiAssignment_0)
{ after(grammarAccess.getFormulaAccess().getFiAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formula__Group__1__Impl
	rule__Formula__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getEqualsSignKeyword_1()); }

	KEYWORD_11 

{ after(grammarAccess.getFormulaAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formula__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getFeAssignment_2()); }
(rule__Formula__FeAssignment_2)
{ after(grammarAccess.getFormulaAccess().getFeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FormulaExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormulaExpression__Group_0__0__Impl
	rule__FormulaExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getFiAssignment_0_0()); }
(rule__FormulaExpression__FiAssignment_0_0)
{ after(grammarAccess.getFormulaExpressionAccess().getFiAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormulaExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormulaExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getGroup_0_1()); }
(rule__FormulaExpression__Group_0_1__0)?
{ after(grammarAccess.getFormulaExpressionAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FormulaExpression__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormulaExpression__Group_0_1__0__Impl
	rule__FormulaExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getMoAssignment_0_1_0()); }
(rule__FormulaExpression__MoAssignment_0_1_0)
{ after(grammarAccess.getFormulaExpressionAccess().getMoAssignment_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormulaExpression__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormulaExpression__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getFeAssignment_0_1_1()); }
(rule__FormulaExpression__FeAssignment_0_1_1)
{ after(grammarAccess.getFormulaExpressionAccess().getFeAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FormulaExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormulaExpression__Group_1__0__Impl
	rule__FormulaExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	KEYWORD_2 

{ after(grammarAccess.getFormulaExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormulaExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormulaExpression__Group_1__1__Impl
	rule__FormulaExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getFe1Assignment_1_1()); }
(rule__FormulaExpression__Fe1Assignment_1_1)
{ after(grammarAccess.getFormulaExpressionAccess().getFe1Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormulaExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormulaExpression__Group_1__2__Impl
	rule__FormulaExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getRightParenthesisKeyword_1_2()); }

	KEYWORD_3 

{ after(grammarAccess.getFormulaExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormulaExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormulaExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getGroup_1_3()); }
(rule__FormulaExpression__Group_1_3__0)?
{ after(grammarAccess.getFormulaExpressionAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FormulaExpression__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormulaExpression__Group_1_3__0__Impl
	rule__FormulaExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getMoAssignment_1_3_0()); }
(rule__FormulaExpression__MoAssignment_1_3_0)
{ after(grammarAccess.getFormulaExpressionAccess().getMoAssignment_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormulaExpression__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormulaExpression__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getFe2Assignment_1_3_1()); }
(rule__FormulaExpression__Fe2Assignment_1_3_1)
{ after(grammarAccess.getFormulaExpressionAccess().getFe2Assignment_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Set__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__0__Impl
	rule__Set__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getLeftCurlyBracketKeyword_0()); }

	KEYWORD_14 

{ after(grammarAccess.getSetAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__1__Impl
	rule__Set__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getLAssignment_1()); }
(rule__Set__LAssignment_1)
{ after(grammarAccess.getSetAccess().getLAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__2__Impl
	rule__Set__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getRightCurlyBracketKeyword_2()); }

	KEYWORD_15 

{ after(grammarAccess.getSetAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getGroup_3()); }
(rule__Set__Group_3__0)?
{ after(grammarAccess.getSetAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Set__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_3__0__Impl
	rule__Set__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getCommaKeyword_3_0()); }

	KEYWORD_6 

{ after(grammarAccess.getSetAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getSAssignment_3_1()); }
(rule__Set__SAssignment_3_1)
{ after(grammarAccess.getSetAccess().getSAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__List__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getAlternatives_0()); }
(rule__List__Alternatives_0)
{ after(grammarAccess.getListAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getGroup_1()); }
(rule__List__Group_1__0)?
{ after(grammarAccess.getListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__List__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_1__0__Impl
	rule__List__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getCommaKeyword_1_0()); }

	KEYWORD_6 

{ after(grammarAccess.getListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getLAssignment_1_1()); }
(rule__List__LAssignment_1_1)
{ after(grammarAccess.getListAccess().getLAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TestPackage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestPackage__Group__0__Impl
	rule__TestPackage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestPackage__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestPackageAccess().getPackageKeyword_0()); }

	KEYWORD_30 

{ after(grammarAccess.getTestPackageAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestPackage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestPackage__Group__1__Impl
	rule__TestPackage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestPackage__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestPackageAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getTestPackageAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestPackage__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestPackage__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestPackage__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestPackageAccess().getGroup_2()); }
(rule__TestPackage__Group_2__0)*
{ after(grammarAccess.getTestPackageAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TestPackage__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestPackage__Group_2__0__Impl
	rule__TestPackage__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestPackage__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestPackageAccess().getFullStopKeyword_2_0()); }

	KEYWORD_8 

{ after(grammarAccess.getTestPackageAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestPackage__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestPackage__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestPackage__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestPackageAccess().getIDTerminalRuleCall_2_1()); }
	RULE_ID
{ after(grammarAccess.getTestPackageAccess().getIDTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Leta__TpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetaAccess().getTpTestPackageParserRuleCall_0_0()); }
	ruleTestPackage{ after(grammarAccess.getLetaAccess().getTpTestPackageParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Leta__TcAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetaAccess().getTcTestCaseParserRuleCall_1_0()); }
	ruleTestCase{ after(grammarAccess.getLetaAccess().getTcTestCaseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestCaseAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTestCaseAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__VAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestCaseAccess().getVVerifyClauseParserRuleCall_2_0()); }
	ruleVerifyClause{ after(grammarAccess.getTestCaseAccess().getVVerifyClauseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__WAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestCaseAccess().getWWhenClauseParserRuleCall_3_0()); }
	ruleWhenClause{ after(grammarAccess.getTestCaseAccess().getWWhenClauseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__SAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestCaseAccess().getSSetClauseParserRuleCall_4_0()); }
	ruleSetClause{ after(grammarAccess.getTestCaseAccess().getSSetClauseParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyClause__FcAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyClauseAccess().getFcFactCompositeParserRuleCall_1_0()); }
	ruleFactComposite{ after(grammarAccess.getVerifyClauseAccess().getFcFactCompositeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__FcAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenClauseAccess().getFcFactCompositeParserRuleCall_1_0()); }
	ruleFactComposite{ after(grammarAccess.getWhenClauseAccess().getFcFactCompositeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetClause__SAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClauseAccess().getSSetParserRuleCall_3_0()); }
	ruleSet{ after(grammarAccess.getSetClauseAccess().getSSetParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__FAssignment_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getFFactParserRuleCall_0_0_0_0()); }
	ruleFact{ after(grammarAccess.getFactCompositeAccess().getFFactParserRuleCall_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__FoAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getFoFormulaParserRuleCall_0_0_1_0()); }
	ruleFormula{ after(grammarAccess.getFactCompositeAccess().getFoFormulaParserRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__OpAssignment_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getOpLogicalOperatorParserRuleCall_0_1_0_0()); }
	ruleLogicalOperator{ after(grammarAccess.getFactCompositeAccess().getOpLogicalOperatorParserRuleCall_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__FcAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getFcFactCompositeParserRuleCall_0_1_1_0()); }
	ruleFactComposite{ after(grammarAccess.getFactCompositeAccess().getFcFactCompositeParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Fc1Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getFc1FactCompositeParserRuleCall_1_1_0()); }
	ruleFactComposite{ after(grammarAccess.getFactCompositeAccess().getFc1FactCompositeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__OpAssignment_1_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getOpLogicalOperatorParserRuleCall_1_3_0_0()); }
	ruleLogicalOperator{ after(grammarAccess.getFactCompositeAccess().getOpLogicalOperatorParserRuleCall_1_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactComposite__Fc2Assignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactCompositeAccess().getFc2FactCompositeParserRuleCall_1_3_1_0()); }
	ruleFactComposite{ after(grammarAccess.getFactCompositeAccess().getFc2FactCompositeParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__TermCompositeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getTermCompositeTermCompositeParserRuleCall_0_0()); }
	ruleTermComposite{ after(grammarAccess.getFactAccess().getTermCompositeTermCompositeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__ComplementAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getComplementComplementParserRuleCall_1_0()); }
	ruleComplement{ after(grammarAccess.getFactAccess().getComplementComplementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__TermComposite2Assignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getTermComposite2TermCompositeParserRuleCall_2_0_0()); }
	ruleTermComposite{ after(grammarAccess.getFactAccess().getTermComposite2TermCompositeParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__FactExtAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getFactExtFactExtParserRuleCall_2_1_0()); }
	ruleFactExt{ after(grammarAccess.getFactAccess().getFactExtFactExtParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactExt__ComplementAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactExtAccess().getComplementComplementParserRuleCall_0_0()); }
	ruleComplement{ after(grammarAccess.getFactExtAccess().getComplementComplementParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactExt__TermCompositeAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactExtAccess().getTermCompositeTermCompositeParserRuleCall_1_0_0()); }
	ruleTermComposite{ after(grammarAccess.getFactExtAccess().getTermCompositeTermCompositeParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactExt__FactExtAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactExtAccess().getFactExtFactExtParserRuleCall_1_1_0()); }
	ruleFactExt{ after(grammarAccess.getFactExtAccess().getFactExtFactExtParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermComposite__QuantifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermCompositeAccess().getQuantifierQuantifierParserRuleCall_0_0()); }
	ruleQuantifier{ after(grammarAccess.getTermCompositeAccess().getQuantifierQuantifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermComposite__TermAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermCompositeAccess().getTermTermParserRuleCall_1_0_0()); }
	ruleTerm{ after(grammarAccess.getTermCompositeAccess().getTermTermParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermComposite__TermInstanceAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermCompositeAccess().getTermInstanceTermInstanceParserRuleCall_1_1_0()); }
	ruleTermInstance{ after(grammarAccess.getTermCompositeAccess().getTermInstanceTermInstanceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermComposite__TermWithAssociationAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermCompositeAccess().getTermWithAssociationTermWithAssociationParserRuleCall_1_2_0()); }
	ruleTermWithAssociation{ after(grammarAccess.getTermCompositeAccess().getTermWithAssociationTermWithAssociationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__IdAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getIdIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getTermAccess().getIdIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__TermAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getTermTermParserRuleCall_0_0_0()); }
	ruleTerm{ after(grammarAccess.getTermInstanceAccess().getTermTermParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__NotEqualOperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getNotEqualOperatorNotEqualOperatorParserRuleCall_0_1_0()); }
	ruleNotEqualOperator{ after(grammarAccess.getTermInstanceAccess().getNotEqualOperatorNotEqualOperatorParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__StringLiteralAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getStringLiteralStringLiteralParserRuleCall_0_2_0()); }
	ruleStringLiteral{ after(grammarAccess.getTermInstanceAccess().getStringLiteralStringLiteralParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__TermAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getTermTermParserRuleCall_1_0_0()); }
	ruleTerm{ after(grammarAccess.getTermInstanceAccess().getTermTermParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__RelationalOperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getRelationalOperatorRelationalOperatorParserRuleCall_1_1_0()); }
	ruleRelationalOperator{ after(grammarAccess.getTermInstanceAccess().getRelationalOperatorRelationalOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermInstance__OtherLiteralAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermInstanceAccess().getOtherLiteralOtherLiteralParserRuleCall_1_2_0()); }
	ruleOtherLiteral{ after(grammarAccess.getTermInstanceAccess().getOtherLiteralOtherLiteralParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermWithAssociation__TAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermWithAssociationAccess().getTTermParserRuleCall_0_0()); }
	ruleTerm{ after(grammarAccess.getTermWithAssociationAccess().getTTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermWithAssociation__RoAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermWithAssociationAccess().getRoRelationalOperatorParserRuleCall_1_0()); }
	ruleRelationalOperator{ after(grammarAccess.getTermWithAssociationAccess().getRoRelationalOperatorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermWithAssociation__IndexAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermWithAssociationAccess().getIndexINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getTermWithAssociationAccess().getIndexINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__VAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getVINTTerminalRuleCall_0_1_0()); }
	RULE_INT{ after(grammarAccess.getQuantifierAccess().getVINTTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__VAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getVINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getQuantifierAccess().getVINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__VAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getVINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getQuantifierAccess().getVINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__V1Assignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getV1INTTerminalRuleCall_3_1_0()); }
	RULE_INT{ after(grammarAccess.getQuantifierAccess().getV1INTTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__V2Assignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getV2INTTerminalRuleCall_3_2_0()); }
	RULE_INT{ after(grammarAccess.getQuantifierAccess().getV2INTTerminalRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__IdAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplementAccess().getIdIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getComplementAccess().getIdIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__FiAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getFiFormulaItemParserRuleCall_0_0()); }
	ruleFormulaItem{ after(grammarAccess.getFormulaAccess().getFiFormulaItemParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__FeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaAccess().getFeFormulaExpressionParserRuleCall_2_0()); }
	ruleFormulaExpression{ after(grammarAccess.getFormulaAccess().getFeFormulaExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__FiAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getFiFormulaItemParserRuleCall_0_0_0()); }
	ruleFormulaItem{ after(grammarAccess.getFormulaExpressionAccess().getFiFormulaItemParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__MoAssignment_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getMoMathOperatorParserRuleCall_0_1_0_0()); }
	ruleMathOperator{ after(grammarAccess.getFormulaExpressionAccess().getMoMathOperatorParserRuleCall_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__FeAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getFeFormulaExpressionParserRuleCall_0_1_1_0()); }
	ruleFormulaExpression{ after(grammarAccess.getFormulaExpressionAccess().getFeFormulaExpressionParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Fe1Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getFe1FormulaExpressionParserRuleCall_1_1_0()); }
	ruleFormulaExpression{ after(grammarAccess.getFormulaExpressionAccess().getFe1FormulaExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__MoAssignment_1_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getMoMathOperatorParserRuleCall_1_3_0_0()); }
	ruleMathOperator{ after(grammarAccess.getFormulaExpressionAccess().getMoMathOperatorParserRuleCall_1_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaExpression__Fe2Assignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaExpressionAccess().getFe2FormulaExpressionParserRuleCall_1_3_1_0()); }
	ruleFormulaExpression{ after(grammarAccess.getFormulaExpressionAccess().getFe2FormulaExpressionParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaItem__TAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaItemAccess().getTTermParserRuleCall_0_0()); }
	ruleTerm{ after(grammarAccess.getFormulaItemAccess().getTTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaItem__TiAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaItemAccess().getTiTermInstanceParserRuleCall_1_0()); }
	ruleTermInstance{ after(grammarAccess.getFormulaItemAccess().getTiTermInstanceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaItem__TwaAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormulaItemAccess().getTwaTermWithAssociationParserRuleCall_2_0()); }
	ruleTermWithAssociation{ after(grammarAccess.getFormulaItemAccess().getTwaTermWithAssociationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathOperator__SumAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathOperatorAccess().getSumPlusSignKeyword_0_0()); }
(
{ before(grammarAccess.getMathOperatorAccess().getSumPlusSignKeyword_0_0()); }

	KEYWORD_5 

{ after(grammarAccess.getMathOperatorAccess().getSumPlusSignKeyword_0_0()); }
)

{ after(grammarAccess.getMathOperatorAccess().getSumPlusSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathOperator__SubtractAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathOperatorAccess().getSubtractHyphenMinusKeyword_1_0()); }
(
{ before(grammarAccess.getMathOperatorAccess().getSubtractHyphenMinusKeyword_1_0()); }

	KEYWORD_7 

{ after(grammarAccess.getMathOperatorAccess().getSubtractHyphenMinusKeyword_1_0()); }
)

{ after(grammarAccess.getMathOperatorAccess().getSubtractHyphenMinusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathOperator__DivideAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathOperatorAccess().getDivideSolidusKeyword_2_0()); }
(
{ before(grammarAccess.getMathOperatorAccess().getDivideSolidusKeyword_2_0()); }

	KEYWORD_9 

{ after(grammarAccess.getMathOperatorAccess().getDivideSolidusKeyword_2_0()); }
)

{ after(grammarAccess.getMathOperatorAccess().getDivideSolidusKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathOperator__MultiplyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathOperatorAccess().getMultiplyAsteriskKeyword_3_0()); }
(
{ before(grammarAccess.getMathOperatorAccess().getMultiplyAsteriskKeyword_3_0()); }

	KEYWORD_4 

{ after(grammarAccess.getMathOperatorAccess().getMultiplyAsteriskKeyword_3_0()); }
)

{ after(grammarAccess.getMathOperatorAccess().getMultiplyAsteriskKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathOperator__RAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathOperatorAccess().getRPercentSignKeyword_4_0()); }
(
{ before(grammarAccess.getMathOperatorAccess().getRPercentSignKeyword_4_0()); }

	KEYWORD_1 

{ after(grammarAccess.getMathOperatorAccess().getRPercentSignKeyword_4_0()); }
)

{ after(grammarAccess.getMathOperatorAccess().getRPercentSignKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathOperator__PAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathOperatorAccess().getPAsteriskAsteriskKeyword_5_0()); }
(
{ before(grammarAccess.getMathOperatorAccess().getPAsteriskAsteriskKeyword_5_0()); }

	KEYWORD_17 

{ after(grammarAccess.getMathOperatorAccess().getPAsteriskAsteriskKeyword_5_0()); }
)

{ after(grammarAccess.getMathOperatorAccess().getPAsteriskAsteriskKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__OAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getOGreaterThanSignKeyword_0_0()); }
(
{ before(grammarAccess.getRelationalOperatorAccess().getOGreaterThanSignKeyword_0_0()); }

	KEYWORD_12 

{ after(grammarAccess.getRelationalOperatorAccess().getOGreaterThanSignKeyword_0_0()); }
)

{ after(grammarAccess.getRelationalOperatorAccess().getOGreaterThanSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__OAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getOLessThanSignKeyword_1_0()); }
(
{ before(grammarAccess.getRelationalOperatorAccess().getOLessThanSignKeyword_1_0()); }

	KEYWORD_10 

{ after(grammarAccess.getRelationalOperatorAccess().getOLessThanSignKeyword_1_0()); }
)

{ after(grammarAccess.getRelationalOperatorAccess().getOLessThanSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__OAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getOGreaterThanSignEqualsSignKeyword_2_0()); }
(
{ before(grammarAccess.getRelationalOperatorAccess().getOGreaterThanSignEqualsSignKeyword_2_0()); }

	KEYWORD_19 

{ after(grammarAccess.getRelationalOperatorAccess().getOGreaterThanSignEqualsSignKeyword_2_0()); }
)

{ after(grammarAccess.getRelationalOperatorAccess().getOGreaterThanSignEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__OAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getOLessThanSignEqualsSignKeyword_3_0()); }
(
{ before(grammarAccess.getRelationalOperatorAccess().getOLessThanSignEqualsSignKeyword_3_0()); }

	KEYWORD_18 

{ after(grammarAccess.getRelationalOperatorAccess().getOLessThanSignEqualsSignKeyword_3_0()); }
)

{ after(grammarAccess.getRelationalOperatorAccess().getOLessThanSignEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__NeoAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getNeoNotEqualOperatorParserRuleCall_4_0()); }
	ruleNotEqualOperator{ after(grammarAccess.getRelationalOperatorAccess().getNeoNotEqualOperatorParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqualOperator__NeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEqualOperatorAccess().getNeExclamationMarkEqualsSignKeyword_0()); }
(
{ before(grammarAccess.getNotEqualOperatorAccess().getNeExclamationMarkEqualsSignKeyword_0()); }

	KEYWORD_16 

{ after(grammarAccess.getNotEqualOperatorAccess().getNeExclamationMarkEqualsSignKeyword_0()); }
)

{ after(grammarAccess.getNotEqualOperatorAccess().getNeExclamationMarkEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Set__LAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getLListParserRuleCall_1_0()); }
	ruleList{ after(grammarAccess.getSetAccess().getLListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Set__SAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getSSetParserRuleCall_3_1_0()); }
	ruleSet{ after(grammarAccess.getSetAccess().getSSetParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__SlAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getSlStringLiteralParserRuleCall_0_0_0()); }
	ruleStringLiteral{ after(grammarAccess.getListAccess().getSlStringLiteralParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__OlAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getOlOtherLiteralParserRuleCall_0_1_0()); }
	ruleOtherLiteral{ after(grammarAccess.getListAccess().getOlOtherLiteralParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__LAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getLListParserRuleCall_1_1_0()); }
	ruleList{ after(grammarAccess.getListAccess().getLListParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


